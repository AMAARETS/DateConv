This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitattributes
.gitignore
CustomHebDate.cs
CustomHebDate1.cs
DateConv.csproj
DateConv.sln
DateConv/CustomDate.cs
DateConv/CustomHebDate.cs
Form1.cs
Form1.Designer.cs
Form1.Designer2.cs
Form1.resx
Gimatria.cs
HebDate.cs
LICENSE.txt
Parse.cs
Program.cs
Properties/AssemblyInfo.cs
Properties/Resources.Designer.cs
Properties/Resources.resx
Properties/Settings.Designer.cs
Properties/Settings.settings
README.md
SyncListBox.cs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitattributes">
###############################################################################
# Set default behavior to automatically normalize line endings.
###############################################################################
* text=auto

###############################################################################
# Set default behavior for command prompt diff.
#
# This is need for earlier builds of msysgit that does not have it on by
# default for csharp files.
# Note: This is only used by command line
###############################################################################
#*.cs     diff=csharp

###############################################################################
# Set the merge driver for project and solution files
#
# Merging from the command prompt will add diff markers to the files if there
# are conflicts (Merging from VS is not affected by the settings below, in VS
# the diff markers are never inserted). Diff markers may cause the following 
# file extensions to fail to load in VS. An alternative would be to treat
# these files as binary and thus will always conflict and require user
# intervention with every merge. To do so, just uncomment the entries below
###############################################################################
#*.sln       merge=binary
#*.csproj    merge=binary
#*.vbproj    merge=binary
#*.vcxproj   merge=binary
#*.vcproj    merge=binary
#*.dbproj    merge=binary
#*.fsproj    merge=binary
#*.lsproj    merge=binary
#*.wixproj   merge=binary
#*.modelproj merge=binary
#*.sqlproj   merge=binary
#*.wwaproj   merge=binary

###############################################################################
# behavior for image files
#
# image files are treated as binary by default.
###############################################################################
#*.jpg   binary
#*.png   binary
#*.gif   binary

###############################################################################
# diff behavior for common document formats
# 
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the 
# entries below.
###############################################################################
#*.doc   diff=astextplain
#*.DOC   diff=astextplain
#*.docx  diff=astextplain
#*.DOCX  diff=astextplain
#*.dot   diff=astextplain
#*.DOT   diff=astextplain
#*.pdf   diff=astextplain
#*.PDF   diff=astextplain
#*.rtf   diff=astextplain
#*.RTF   diff=astextplain
</file>

<file path=".gitignore">
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd
</file>

<file path="CustomHebDate.cs">
using System;

namespace DateConv
{
    internal class CustomHebDate
    {
        private string _day;
        private string _month;
        private string _year;
        private string _elef;
        //private HebDate hebDate;
        //private Gimatria gimatria;
        public string Day
        {
            get { return _day; }
            set { _day = value; }
        }

        public string Month
        {
            get { return _month; }
            set { _month = value; }
        }

        public string Year
        {
            get { return _year; }
            set { _year = value; }
        }

        public string Elef
        {
            get { return _elef; }
            set { _elef = value; }
        }

        public string GetHebDate()
        {
            return $"{_day} {_month} {_elef}'{_year}";
        }
        public void setHebDate(DateTime Date)
        {
            // Convert the input Gregorian date to a Hebrew date

            try
            {
                int[] hebrewDate = HebDate.ConvertToHebrewDate(Date);
                //hebDate = new HebDate();
                //gimatria = new Gimatria();
                _day = Gimatria.GimatriaToHebrewLetters(hebrewDate[0]);
                _month = Gimatria.NumberToHebChodesName(hebrewDate[1], hebrewDate[2] + (hebrewDate[3])*1000);
                _year = Gimatria.GimatriaToHebrewLetters(hebrewDate[2]);
                _elef = Gimatria.GimatriaToHebrewLetters(hebrewDate[3]);

            }
            catch (ArgumentException)
            {
                //throw new ArgumentException("Invalid Gregorian date format.");
                _day = "kkkkk";
            }
        }
    }
}
</file>

<file path="CustomHebDate1.cs">
using System;

namespace DateConv
{
    internal class CustomHebDate
    {
        private string _day;
        private string _month;
        private string _year;

        public string Day
        {
            get { return _day; }
            set { _day = value; }
        }

        public string Month
        {
            get { return _month; }
            set { _month = value; }
        }

        public string Year
        {
            get { return _year; }
            set { _year = value; }
        }

        public string GetHebDate
        {
            return $"{_day} {_month} {_year}";
        }
        public void setHebDate (DataTime Date)
        {
                // Convert the input Gregorian date to a Hebrew date
                
                if (DateTime.TryParse(value, out Date))
                {
                    string hebrewDate = HebDate.ConvertToHebrewDate(Date);
                    var parts = hebrewDate.Split(' ');

                    if (parts.Length == 3)
                    {
                        _day = parts[0];
                        _month = parts[1];
                        _year = parts[2];
                    }
                    else
                    {
                        throw new ArgumentException("Invalid Hebrew date format.");
                    }
                }
                else
                {
                    throw new ArgumentException("Invalid Gregorian date format.");
                }
            }
        }
    }
}
</file>

<file path="DateConv.sln">
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35919.96 d17.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "DateConv", "DateConv.csproj", "{D1FCE3ED-63E1-4151-84A7-9A0F2088720A}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{D1FCE3ED-63E1-4151-84A7-9A0F2088720A}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{D1FCE3ED-63E1-4151-84A7-9A0F2088720A}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{D1FCE3ED-63E1-4151-84A7-9A0F2088720A}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{D1FCE3ED-63E1-4151-84A7-9A0F2088720A}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {6F772F44-CD5E-459F-AB13-77F731B9E83D}
	EndGlobalSection
EndGlobal
</file>

<file path="DateConv/CustomDate.cs">
using System;

namespace DateConv
{
    internal class CustomDate
    {
        private int _day;
        private int _month;
        private int _year;

        public int Day
        {
            get { return _day; }
            set { _day = value; }
        }

        public int Month
        {
            get { return _month; }
            set { _month = value; }
        }

        public int Year
        {
            get { return _year; }
            set { _year = value; }
        }

        public void SetDate(DateTime date)
        {
            _day = date.Day;
            _month = date.Month;
            _year = date.Year;
        }

        public DateTime GetDate()
        {
            try
            {
                return new DateTime(_year, _month, _day);
            }
            catch (ArgumentOutOfRangeException)
            {
                if (_day > 28)
                {
                        for (int i = 1; i < 4; i++)
                        {
                        try
                        {
                            DateTime dateNisuy = new DateTime(_year, _month, _day - i);
                            throw new ArgumentException($"בחודש זה ישנם רק {_day-i} ימים");
                        }
                        catch (ArgumentOutOfRangeException)
                        {
                        }
                    }
                }
                // Handle the case where the date is invalid
                throw new ArgumentException("הערך לא תקין");
            }
        }
    }
}
</file>

<file path="DateConv/CustomHebDate.cs">
using System;

namespace DateConv
{
    internal class CustomHebDate
    {
        private string _day;
        private string _month;
        private string _year;

        public string Day
        {
            get { return _day; }
            set { _day = value; }
        }

        public string Month
        {
            get { return _month; }
            set { _month = value; }
        }

        public string Year
        {
            get { return _year; }
            set { _year = value; }
        }

        public string GetHebDate
        {
            return $"{_day} {_month} {_year}";
        }
        public void setHebDate (DataTime Date)
        {
                // Convert the input Gregorian date to a Hebrew date
                
                if (DateTime.TryParse(value, out Date))
                {
                    string hebrewDate = HebDate.ConvertToHebrewDate(Date);
                    var parts = hebrewDate.Split(' ');

                    if (parts.Length == 3)
                    {
                        _day = parts[0];
                        _month = parts[1];
                        _year = parts[2];
                    }
                    else
                    {
                        throw new ArgumentException("Invalid Hebrew date format.");
                    }
                }
                else
                {
                    throw new ArgumentException("Invalid Gregorian date format.");
                }
            }
        }
    }
}
</file>

<file path="Form1.Designer2.cs">
namespace DateConv
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
                components.Dispose();
            base.Dispose(disposing);
        }
        #region Windows Form Designer generated code
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.dateTimePicker1 = new System.Windows.Forms.DateTimePicker();
            this.comboBoxHebShana = new System.Windows.Forms.ComboBox();
            this.comboBoxHebElef = new System.Windows.Forms.ComboBox();
            this.comboBoxHebChodesh = new System.Windows.Forms.ComboBox();
            this.comboBoxHebYom = new System.Windows.Forms.ComboBox();
            this.comboBoxGregShana = new System.Windows.Forms.ComboBox();
            this.comboBoxGregChodesh = new System.Windows.Forms.ComboBox();
            this.comboBoxGregYom = new System.Windows.Forms.ComboBox();
            this.dateTimePickerGreg = new System.Windows.Forms.DateTimePicker();
            this.labelShanaGreg = new System.Windows.Forms.Label();
            this.labelChodeshGreg = new System.Windows.Forms.Label();
            this.labelYomGreg = new System.Windows.Forms.Label();
            this.groupBoxHeb = new System.Windows.Forms.GroupBox();
            this.groupBoxGreg = new System.Windows.Forms.GroupBox();
            this.listBoxHeb = new System.Windows.Forms.ListBox();
            this.listBoxGreg = new System.Windows.Forms.ListBox();
            this.buttonShmira = new System.Windows.Forms.Button();
            this.errorProvider1 = new System.Windows.Forms.ErrorProvider(this.components);
            this.groupBoxHeb.SuspendLayout();
            this.groupBoxGreg.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).BeginInit();
            this.SuspendLayout();
            // 
            // dateTimePicker1
            // 
            this.dateTimePicker1.Location = new System.Drawing.Point(12, 12);
            this.dateTimePicker1.Name = "dateTimePicker1";
            this.dateTimePicker1.Size = new System.Drawing.Size(200, 20);
            this.dateTimePicker1.TabIndex = 0;
            // 
            // comboBoxHebShana
            // 
            this.comboBoxHebShana.FormattingEnabled = true;
            this.comboBoxHebShana.Location = new System.Drawing.Point(4, 12);
            this.comboBoxHebShana.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxHebShana.Name = "comboBoxHebShana";
            this.comboBoxHebShana.Size = new System.Drawing.Size(82, 21);
            this.comboBoxHebShana.TabIndex = 1;
            // 
            // comboBoxHebElef
            // 
            this.comboBoxHebElef.FormattingEnabled = true;
            this.comboBoxHebElef.Location = new System.Drawing.Point(89, 12);
            this.comboBoxHebElef.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxHebElef.Name = "comboBoxHebElef";
            this.comboBoxHebElef.Size = new System.Drawing.Size(82, 21);
            this.comboBoxHebElef.TabIndex = 2;
            // 
            // comboBoxHebChodesh
            // 
            this.comboBoxHebChodesh.FormattingEnabled = true;
            this.comboBoxHebChodesh.Location = new System.Drawing.Point(173, 12);
            this.comboBoxHebChodesh.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxHebChodesh.Name = "comboBoxHebChodesh";
            this.comboBoxHebChodesh.Size = new System.Drawing.Size(82, 21);
            this.comboBoxHebChodesh.TabIndex = 3;
            // 
            // comboBoxHebYom
            // 
            this.comboBoxHebYom.FormattingEnabled = true;
            this.comboBoxHebYom.Location = new System.Drawing.Point(258, 12);
            this.comboBoxHebYom.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxHebYom.Name = "comboBoxHebYom";
            this.comboBoxHebYom.Size = new System.Drawing.Size(82, 21);
            this.comboBoxHebYom.TabIndex = 4;
            // 
            // comboBoxGregShana
            // 
            this.comboBoxGregShana.FormattingEnabled = true;
            this.comboBoxGregShana.Location = new System.Drawing.Point(4, 12);
            this.comboBoxGregShana.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxGregShana.Name = "comboBoxGregShana";
            this.comboBoxGregShana.Size = new System.Drawing.Size(82, 21);
            this.comboBoxGregShana.TabIndex = 5;
            // 
            // comboBoxGregChodesh
            // 
            this.comboBoxGregChodesh.FormattingEnabled = true;
            this.comboBoxGregChodesh.Location = new System.Drawing.Point(89, 12);
            this.comboBoxGregChodesh.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxGregChodesh.Name = "comboBoxGregChodesh";
            this.comboBoxGregChodesh.Size = new System.Drawing.Size(82, 21);
            this.comboBoxGregChodesh.TabIndex = 6;
            // 
            // comboBoxGregYom
            // 
            this.comboBoxGregYom.FormattingEnabled = true;
            this.comboBoxGregYom.Location = new System.Drawing.Point(173, 12);
            this.comboBoxGregYom.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.comboBoxGregYom.Name = "comboBoxGregYom";
            this.comboBoxGregYom.Size = new System.Drawing.Size(82, 21);
            this.comboBoxGregYom.TabIndex = 7;
            // 
            // dateTimePickerGreg
            // 
            this.dateTimePickerGreg.Location = new System.Drawing.Point(258, 12);
            this.dateTimePickerGreg.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.dateTimePickerGreg.Name = "dateTimePickerGreg";
            this.dateTimePickerGreg.Size = new System.Drawing.Size(135, 20);
            this.dateTimePickerGreg.TabIndex = 8;
            // 
            // labelShanaGreg
            // 
            this.labelShanaGreg.AutoSize = true;
            this.labelShanaGreg.Location = new System.Drawing.Point(4, 28);
            this.labelShanaGreg.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
            this.labelShanaGreg.Name = "labelShanaGreg";
            this.labelShanaGreg.Size = new System.Drawing.Size(31, 13);
            this.labelShanaGreg.TabIndex = 9;
            this.labelShanaGreg.Text = "שנה:";
            // 
            // labelChodeshGreg
            // 
            this.labelChodeshGreg.AutoSize = true;
            this.labelChodeshGreg.Location = new System.Drawing.Point(89, 28);
            this.labelChodeshGreg.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
            this.labelChodeshGreg.Name = "labelChodeshGreg";
            this.labelChodeshGreg.Size = new System.Drawing.Size(38, 13);
            this.labelChodeshGreg.TabIndex = 10;
            this.labelChodeshGreg.Text = "חודש:";
            // 
            // labelYomGreg
            // 
            this.labelYomGreg.AutoSize = true;
            this.labelYomGreg.Location = new System.Drawing.Point(173, 28);
            this.labelYomGreg.Margin = new System.Windows.Forms.Padding(2, 0, 2, 0);
            this.labelYomGreg.Name = "labelYomGreg";
            this.labelYomGreg.Size = new System.Drawing.Size(27, 13);
            this.labelYomGreg.TabIndex = 11;
            this.labelYomGreg.Text = "יום:";
            // 
            // groupBoxHeb
            // 
            this.groupBoxHeb.Controls.Add(this.comboBoxHebShana);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebElef);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebChodesh);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebYom);
            this.groupBoxHeb.Location = new System.Drawing.Point(7, 46);
            this.groupBoxHeb.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.groupBoxHeb.Name = "groupBoxHeb";
            this.groupBoxHeb.Padding = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.groupBoxHeb.Size = new System.Drawing.Size(347, 32);
            this.groupBoxHeb.TabIndex = 12;
            this.groupBoxHeb.TabStop = false;
            this.groupBoxHeb.Text = "תאריך עברי";
            // 
            // groupBoxGreg
            // 
            this.groupBoxGreg.Controls.Add(this.dateTimePickerGreg);
            this.groupBoxGreg.Controls.Add(this.labelShanaGreg);
            this.groupBoxGreg.Controls.Add(this.comboBoxGregShana);
            this.groupBoxGreg.Controls.Add(this.labelChodeshGreg);
            this.groupBoxGreg.Controls.Add(this.comboBoxGregChodesh);
            this.groupBoxGreg.Controls.Add(this.labelYomGreg);
            this.groupBoxGreg.Controls.Add(this.comboBoxGregYom);
            this.groupBoxGreg.Location = new System.Drawing.Point(7, 84);
            this.groupBoxGreg.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.groupBoxGreg.Name = "groupBoxGreg";
            this.groupBoxGreg.Padding = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.groupBoxGreg.Size = new System.Drawing.Size(347, 52);
            this.groupBoxGreg.TabIndex = 13;
            this.groupBoxGreg.TabStop = false;
            this.groupBoxGreg.Text = "תאריך לועזי";
            // 
            // listBoxHeb
            // 
            this.listBoxHeb.Location = new System.Drawing.Point(7, 178);
            this.listBoxHeb.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.listBoxHeb.Name = "listBoxHeb";
            this.listBoxHeb.Size = new System.Drawing.Size(168, 95);
            this.listBoxHeb.TabIndex = 14;
            // 
            // listBoxGreg
            // 
            this.listBoxGreg.Location = new System.Drawing.Point(180, 178);
            this.listBoxGreg.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.listBoxGreg.Name = "listBoxGreg";
            this.listBoxGreg.Size = new System.Drawing.Size(175, 95);
            this.listBoxGreg.TabIndex = 15;
            // 
            // buttonShmira
            // 
            this.buttonShmira.Location = new System.Drawing.Point(149, 148);
            this.buttonShmira.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.buttonShmira.Name = "buttonShmira";
            this.buttonShmira.Size = new System.Drawing.Size(67, 26);
            this.buttonShmira.TabIndex = 16;
            this.buttonShmira.Text = "שמור";
            this.buttonShmira.UseVisualStyleBackColor = true;
            this.buttonShmira.Click += new System.EventHandler(this.buttonShmira_Click);
            // 
            // errorProvider1
            // 
            this.errorProvider1.ContainerControl = this;
            this.errorProvider1.RightToLeft = true;
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(375, 298);
            this.Controls.Add(this.buttonShmira);
            this.Controls.Add(this.listBoxGreg);
            this.Controls.Add(this.listBoxHeb);
            this.Controls.Add(this.groupBoxHeb);
            this.Controls.Add(this.groupBoxGreg);
            this.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
            this.Name = "Form1";
            this.Text = "המרת תאריכים";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.groupBoxHeb.ResumeLayout(false);
            this.groupBoxGreg.ResumeLayout(false);
            this.groupBoxGreg.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).EndInit();
            this.ResumeLayout(false);

        }
        #endregion

        private System.Windows.Forms.DateTimePicker dateTimePicker1;
        private System.Windows.Forms.ComboBox comboBoxHebShana;
        private System.Windows.Forms.ComboBox comboBoxHebElef;
        private System.Windows.Forms.ComboBox comboBoxHebChodesh;
        private System.Windows.Forms.ComboBox comboBoxHebYom;
        private System.Windows.Forms.ComboBox comboBoxGregShana;
        private System.Windows.Forms.ComboBox comboBoxGregChodesh;
        private System.Windows.Forms.ComboBox comboBoxGregYom;
        private System.Windows.Forms.DateTimePicker dateTimePickerGreg;
        private System.Windows.Forms.Label labelShanaGreg;
        private System.Windows.Forms.Label labelChodeshGreg;
        private System.Windows.Forms.Label labelYomGreg;
        private System.Windows.Forms.GroupBox groupBoxHeb;
        private System.Windows.Forms.GroupBox groupBoxGreg;
        private System.Windows.Forms.ListBox listBoxHeb;
        private System.Windows.Forms.ListBox listBoxGreg;
        private System.Windows.Forms.Button buttonShmira;
        private System.Windows.Forms.ErrorProvider errorProvider1;
    }
}
</file>

<file path="Form1.resx">
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="errorProvider1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAAAAMQOAADEDgAAAAAAAAAA
        AADz9Pbz9Pbz9fbz9Pbz8/Xz8/bz9Pfx8/Xz8/bz9Pbz9PXz9fby9PX19vfy8/by9fbx8fTz9Pbz9Pfy
        8vPx8/T09fXz8/Xz9PX09Pbz9fXz8/b09fbz9fX09Pb08/Xy9Pb09fXz8/Xy9PTy9PXz9PTz9fby9PTz
        9PT09ffx8/Tz8/by8/Xx8/Xy8/Ty8/Xy8/Xx8/Tz9fbz9PXy8/X09fXy9Pb09fbz8/Xy9PXy9fbz9Pby
        9PXy8/Xy9PTz8vTy9PTz9PXz8/by9fb09fbz8/Xy9PXy9Pb09Pby9PXz9Pbz9PT09Pby9Pbw8vPz9PXy
        8vT08/Xy8vPy8/Ty8/Xy9PXz9fbz9Pby9PT09PXz9fbz9PXy9PXy9PXx8/Tz9fbz9fXz9fby9PTy8/Xy
        8/Tz9Pby9PXy8/bz9PXy9fX09fby8vTz9PXz9Pby9fXy8/Ty8/Xz8/Xz9fby9PXy8/Tx9PTz9fXz9fXy
        9fbz9PX19fbz9Pby8vXz9fbz9ffx8/Xy9fXy8/Ty8/T09Pbz9PX09PW0axmybRmvbRi0bRqybhuzbRiy
        bhqzbhqzbBi0bxuybhuybBaybRuxbRixbBi0bxqzbhmzbRqxbRiwbBexbhqxbRj08/Xz9PXz8/Tz9PTz
        8/Xz9Pby8/Xy9Pby9PaxbBf1+frz9PXx8/Ty8/Xz9PXz9fbz9Pbx8vPy8/X09fbz8/Xy9Pbz9Pfz9ffy
        8/Ty9fXz9fX08/by9PTy9PPy8/Tx9fS0cBvz9Pby9PXy9PXy9PTx8/Xz9PPz9Pbz8vWzbhvz8/Xz8/Xy
        8/Xy9PXy9PXy8/Xy8vby9PXz8/Ty8fTy8/Xy8vPy8/P09PXy8/Py9PXy9PT19ffy8/Xy9PXz9Pbz8/ax
        ahjz8/Xz8/Ty9fXz9PXz9Pb08/Tx8/Tz9PaxbRrx8/Tz9fXz9vXy8/Py8vTy8/Ty8/fz8/Xy8/Xy9PTz
        9PXy9Pbx8/Xz8/by9PXx8vXz8vXz8/bz8/Tz9ffz9PXy9fazbBjy9PXy9fXy9PXy9Pb08/bz9PXy9Pby
        9PSybRry8/Xy8vXy9PSzbxzy8/WzcxWvahS0bhmzcBvy8/X09fbw9PPz8/Tx8/bz9PXy8vPy8/Pz9PTz
        8vTy8/Ty8vTy8/Wzbhnz9Pby9PX09vfz9PX19ffy9PXy8vT09fezbhry9PTz8/bz9PazbRn09PXw9PXx
        8vPt7vD2/vvz9PT09Pby8vaxbxr09fb08/SzbRuzbRi0bhnz8/T8+//19vnz9PSxbRj09Pby9fXz9fbx
        8vTz9fXz9PXz9Pbz9PazbRrz9Pbz9PXy8/W1cRzy8/Xy9Pb4+Pe0cRvx8/X9///z8vby8vS1bhvy8vTz
        9Pa0dB6ybhrz9Pfz9favVgnw9Pby8/Wybhn09fbz8/Xw8fTx8fTz9vjz9PXz8/Ty8/a2bxzy8/Xz8/W0
        bRmybxrz8/e1bxnz8/W2eyHv8fWybRrx9PW2dyGxbxy0bhr39/qwXw+4aiL6//+jUAG0bxW0cBry9Pax
        axfy9Pby9PXz9PX09Pb08/T09Pbx9PTx8/W1bxzz8/Ty9PXx8vO0bBjz9PTz8/W1bxu0bhrz8/XXt5fx
        8/Xy9PXy9fby8/SfRQDy8fHy8/Ty8/Xy9PX09fXz8/Xz8/Wzbxzz8/Xy9PXy8/Xz9PXz9Pbz9fby9Pbz
        9Pazbhrz9PXz9Pbx8/bz9Pbz9PXy9PXx8vT09Pbz9PX09fb08/Ty8/by9Pby8/T09fbz9Pby8vTz9Pfy
        9PX09ff09Pfy8/Szbhvy9PXz9fb19Pby8/Xz8/Xz9PXy9Pby8/S0bRzx8/Py9PX8/fu0bhzy8PTy9fW1
        chizcBvx9Pby9Pazbxzy9fXz9Pby9PXy8vTz8/by9PXy8/Tz9PXy9PXz9fby9Pazbxvy9PXz9Pbz9fbz
        8/by8/Xz9Pfz8/b09Payaxny8vXy9PS1bhvy9PWybBry8vS6dyLy8/SybBfy8/azaxnz8/Xy9PXy8/S2
        bxrz9Pbz9Pby8vP7//+wYAny9PXy8/W0bhry8/bz9PXy9Pbz9fby9fbz9PXz9fbw8vOybBjx8vTz8/Wy
        bxr09fa0bRnx8/SxbBr09fa2bxnz8/fy8vTz8/Xy8/Tx9PSuaRfy9PXz8/Xz8/Tz8/WybBjz9Pbx8/Sz
        bhrz8/Tz8vTy8/Xz9Pby9PT09PXx8/Xz8vWzbBry8vXz8/W3ch7y8/WybBjy8vSzbRrr5Nfz8/bz9PXy
        8/TPpIDy8/azbBmzbhuybhSdRAD28/O0bBq0bxrz9Pby9PaybBj09Pby8/Ty9PTy8/Ty9PTz8/Ty9Pby
        8vSxbhjy8/Xx8/SxbBijTwCybBjz9PazbxqzbRqxbBrz9fby8/W0bx7y9PXx8/Xz8vTz9Pnz9fXz9PTy
        8/Xy9fbz9fbx8/Wzbhzy8/Xz9fby8/Xy8/Xx8/Xz8/Xy9PXz8/Szbhzz9Pbz9Pfy8/Xy9fby9PXy9fbz
        9PXy8/Tz9PXz9Pby8/Ty8/b09vfy8/Ty8vTz9Pby9PX09Pfz9Pb09Pby9PXy8/Wybhny8vPz9Pbz9PX0
        9fby8/bx8/Tx9PXx8/W1bhvz8/Xz9PXy8/Xy8vXy8/bz8/Xz9ffy9PTz9fby8/Tz9fbz8/Xz8/Ty9PXy
        9PTz8/Xx9fT09PXz9PTz9fb08/Xy9PWybBfy9PTy8/b09PXy8/X19vfy8vTz9Pbz9PazbRqzcB20cSCz
        bxuzcB+1cByzcB6zcyCzcR2zcB20cBy0cx+zbhmycRqwbx2zcCCzcRyycBuxbhyzcR2ybhy1cx6ycR60
        bhrz9PXz9fbz8vTz9PX09ffy9PTy8/Xz8/WybhmwaxiybRmybBixaxiyaxexbRmzbhqxbBqzbxqybRuy
        bRe0bhq0cBu0bhmybBiybRizbhmzbRmybRqxbRm0bRqybRizbhv09fX09PXz9fjz9Pjy9fTz9Pfy8/Py
        8/SybRm0bxy0cBuzbRl7TRiybRl8TxizbhqzbxqybBmzbhuybxm0bxqybBq1bxuzbxyxbRl9UBi1bhp9
        UReybBqzbRmybhm1bhzz9fXz9PXz8/Xx9PXz9PXy9fbz9PT09fe1cB2zbBmxbBi0bhyybRq2bhmxaxey
        bRq0bxu0bRqzbRmzbRmybRm1bRyzaxmxahaxbRm0cB2ybBmxbBmzbBqwaxi0bhuzbhv09fbz9Pbz9PT0
        9fbz8/Xx9fXy8/bz8/W1cBqybRmxaxqzbRizbhqybRqybRizbhqzbhqybhuybRmxbBezbRq0bxyybRq0
        bRmzbRqzbhqybRiybxqybxqxbBmxbRmycB7y9Pbz9fbz9Pby9Pbz8/Xz9fXz8/Xy8/T09Pbw8/WjTQCm
        TQCzbhuxbRmxaximTgGlTQClTQGiSgClTQCmTAKkTgKjTQGmUACmTACzbBmybRmybRmkTwKkSgDx9fbz
        9fXz9fbz8/Xx8vTz9Pby9ffx8/Xz9PXy9PXy8/Tz9Pbz9ffz9PeybRm0bhmxbBbz8/Xz9Pby8/Xz9PT0
        9fXz9fby9fXz8/Xy8vXz8/SzbhmybhqzbBn09fXz9fbz9Pbz9Pb09vXz9PXy9Pb09fXz9fTy9PXx8/Xz
        9PXy8/Xz8/Tz9PX09fbx8vOwZhHz8/Xy9fbz9Pbz8/Xx9Pb19vXz8/X09vfz9PXx8vPz9PX09verWwjz
        8/Ty8/Pz8/Tz8/b09ffy9PTy9vXz9Pfz8/Tz9Pby9PXy9PXy8/Tz9PTy9PXy9Pfy9PXy8/b09ffz9PTy
        8/Xy9PXy9Pfz9ffy8/Tz9fbz8vXx8vTy8/Xz9Pbx8vXz9PXy9fX09fb19/fz9fXz9PXy9PTz8/X19Pfz
        8/Ty9PXx8/Xy9PX09vf09fXz9fXz9fb09Pbz8/Xx8/Pz9PXy8/bx8vTz9ffz9PTz9PXz8/by9Pbz8/Xz
        9fby8/T09fby9Pbz9PXz8/Xy8/Xz8vXz9Pb09PXy9fXy9PXy9fXy8/bz9PXz9fby9fby8vTx9PTz9PXy
        9Pfz8/Xz8/Xz8/Xy8/Xz8/bx8/Tz8/Tz9Pfy8/X09fXz8/Pz9PXz8/Xz8/Ty9PT09PXz9PXz8/Xx9PX2
        9fjz9PTy9PTz8/Xz9fYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>
</file>

<file path="Gimatria.cs">
using System;
using System.Globalization;

namespace DateConv
{
    internal class Gimatria
    {

        public static int ConvertToGimatria(string hebrewText)
        {
            int total = 0;
            for (int i = 0; i < hebrewText.Length; i++)
            {
                char c = hebrewText[i];

                // Check if the character is a Hebrew letter
                if (c >= 'א' && c <= 'ת')
                {
                    int value = GetGimatriaValue(c);

                    // Check if the next character is a geresh (׳)
                    if (i + 1 < hebrewText.Length && hebrewText[i + 1] == '\'')
                    {
                        value *= 1000; // Multiply the value by 1,000
                        
                    }

                    total += value;
                }
            }
            return total;
        }
        public static int GetGimatriaValue(char hebrewChar)
        {
            // Convert the Hebrew character to its Gimatria value
            switch (hebrewChar)
            {
                case 'א': return 1;
                case 'ב': return 2;
                case 'ג': return 3;
                case 'ד': return 4;
                case 'ה': return 5;
                case 'ו': return 6;
                case 'ז': return 7;
                case 'ח': return 8;
                case 'ט': return 9;
                case 'י': return 10;
                case 'כ': return 20;
                case 'ל': return 30;
                case 'מ': return 40;
                case 'נ': return 50;
                case 'ס': return 60;
                case 'ע': return 70;
                case 'פ': return 80;
                case 'צ': return 90;
                case 'ק': return 100;
                case 'ר': return 200;
                case 'ש': return 300;
                case 'ת': return 400;
                default: return 0; // Non-Hebrew characters are ignored
            }
        }
        public static string GimatriaToHebrewLetters(int number)
        {
            string strTemp = "";
            if (number > 900)
            {
                strTemp += "תתק";
            }
            else if (number > 800)
            {
                strTemp += "תת";
            }
            else if (number > 700)
            {
                strTemp += "תש";
            }
            else if (number > 600)
            {
                strTemp += "תר";
            }
            else if (number > 500)
            {
                strTemp += "תק";
            }
            else if (number > 400)
            {
                strTemp += "ת";
            }
            else if (number > 300)
            {
                strTemp += "ש";
            }
            else if (number > 200)
            {
                strTemp += "ר";
            }
            else if (number > 100)
            {
                strTemp += "ק";
            }
            int Digit = (number % 100) / 10;

            if (Digit > 0)
            {
                switch (Digit)
                {
                    case 1: strTemp += "י"; break;
                    case 2: strTemp += "כ"; break;
                    case 3: strTemp += "ל"; break;
                    case 4: strTemp += "מ"; break;
                    case 5: strTemp += "נ"; break;
                    case 6: strTemp += "ס"; break;
                    case 7: strTemp += "ע"; break;
                    case 8: strTemp += "פ"; break;
                    case 9: strTemp += "צ"; break;
                }
            }
            int Digit2 = number % 10;
            if (Digit2 > 0)
            {
                switch (Digit2)
                {
                    case 1: strTemp += "א"; break;
                    case 2: strTemp += "ב"; break;
                    case 3: strTemp += "ג"; break;
                    case 4: strTemp += "ד"; break;
                    case 5: strTemp += "ה"; break;
                    case 6: strTemp += "ו"; break;
                    case 7: strTemp += "ז"; break;
                    case 8: strTemp += "ח"; break;
                    case 9: strTemp += "ט"; break;
                }
            }
            //בדיקה אם קיים במשתנה STRTEMP הצירוף "יה" וא"כ להחליף ל"טו" ואת "יו" ל"טז" ו"רעה" ל"ערה" ו"רצח" ל"רחצ" ו"רע" ל"ער" ו"שד ל"דש" ושמד" לשדמ" 
            if (strTemp.Contains("יה"))
            {
                strTemp = strTemp.Replace("יה", "טו");
            }
            else if (strTemp.Contains("יו"))
            {
                strTemp = strTemp.Replace("יו", "טז");
            }
            else if (strTemp.Contains("רעה"))
            {
                strTemp = strTemp.Replace("רעה", "ערה");
            }
            else if (strTemp.Contains("רצח"))
            {
                strTemp = strTemp.Replace("רצח", "רחצ");
            }
            else if (strTemp.Contains("רע"))
            {
                strTemp = strTemp.Replace("רע", "ער");
            }
            else if (strTemp.Contains("שד"))
            {
                strTemp = strTemp.Replace("שד", "דש");
            }
            else if (strTemp.Contains("שמד"))
            {
                strTemp = strTemp.Replace("שמד", "שדמ");
            }
            return strTemp;
        }
        public static string NumberToHebChodesName(int hebrewMonth, int Shana)
        {
            HebrewCalendar hebrewCalendar = new HebrewCalendar(); // מאתחל את לוח השנה העברי
            string[] hebrewMonths = new string[] {
            "","תשרי", "חשוון", "כסלו", "טבת", "שבט", "אדר", "אדר א'", "אדר ב'","ניסן", "אייר", "סיון", "תמוז", "אב", "אלול"
            };

            string monthName = ""; // משתנה לאחסון שם החודש העברי

            if (hebrewMonth < 6)
            {
                monthName = hebrewMonths[hebrewMonth];
            }
            else if (hebrewCalendar.IsLeapYear(Shana))
            {
                hebrewMonth++;
                monthName = hebrewMonths[hebrewMonth];
            }
            else if (hebrewMonth == 6)
            {
                monthName = hebrewMonths[hebrewMonth];
            }
            else
            {
                hebrewMonth += 2;
                monthName = hebrewMonths[hebrewMonth];
            }
            return monthName;

        }
        public static int HebCodeshNameToNumber(string monthName, int YearNumber)
        {
            HebrewCalendar hebrewCalendar = new HebrewCalendar(); // מאתחל את לוח השנה העברי

            // Convert Hebrew month name to its corresponding number
            switch (monthName)
            {
                case "תשרי": return 1;
                case "חשוון":
                case "מרחשון": // Added for compatibility
                case "חשון":  // Added for compatibility
                case "מר-חשוון":
                case "מרחשוון": return 2; // Added for compatibility
                case "כסלו":
                case "כסליו": return 3; // Added for compatibility
                case "טבת": return 4;
                case "שבט": return 5;
                
                //case "אדר א": return 6;
                //case "אדר ב": return 7;
                default:
                    if (hebrewCalendar.IsLeapYear(YearNumber))
                    {
                        switch (monthName)
                        {
                            case "אדר": throw new ArgumentException("השנה שנבחרה הינה שנה מעוברת יש לבחור אדר א' או ב'");
                            case "אדר א": return 6;
                            case "אדר ב": return 7;
                            case "ניסן": return 8;
                            case "אייר": return 9;
                            case "סיון": return 10;
                            case "תמוז": return 11;
                            case "אב": return 12;
                            case "אלול": return 13;
                        }
                    }
                    else
                    {
                        switch (monthName)
                        {
                            case "אדר": return 6;
                            case "אדר א": throw new ArgumentException("השנה שנבחרה אינה מעוברת");
                            case "אדר ב": throw new ArgumentException("השנה שנבחרה אינה מעוברת");
                            case "ניסן": return 7;
                            case "אייר": return 8;
                            case "סיון": return 9;
                            case "תמוז": return 10;
                            case "אב": return 11;
                            case "אלול": return 12;
                        }
                    }
                    break; // Ensure control does not fall out of the switch
            }

            // Return a default value if no match is found
            return 0;
        }
    }
}
</file>

<file path="HebDate.cs">
using System;
using System.Globalization;

namespace DateConv
{
    internal class HebDate
    {
        public static int[] ConvertToHebrewDate(DateTime gregorianDate)
        {
            HebrewCalendar hebrewCalendar = new HebrewCalendar();

            int year = (hebrewCalendar.GetYear(gregorianDate)) % 1000;
            int month = hebrewCalendar.GetMonth(gregorianDate);
            int day = hebrewCalendar.GetDayOfMonth(gregorianDate);
            int elef = (hebrewCalendar.GetYear(gregorianDate)) / 1000;
            // Return an array with day, month, year, and a placeholder value (e.g., 0)
            return new int[] { day, month, year, elef };
        }

        public static DateTime ConvertIntToGregorianDate(int hebrewYear, int hebrewMonth, int hebrewDay)
        {
            HebrewCalendar hebrewCalendar = new HebrewCalendar();

            try
            {
                // יצירת תאריך לועזי מתוך תאריך עברי
                DateTime gregorianDate = hebrewCalendar.ToDateTime(hebrewYear, hebrewMonth, hebrewDay, 0, 0, 0, 0);
                return gregorianDate;
            }
            catch (ArgumentOutOfRangeException)
            {
                // טיפול במקרה של תאריך עברי לא תקין
                if (hebrewDay == 30)
                {
                    try
                    {                         // אם התאריך הוא ה-30 בחודש, ננסה להמיר אותו ל-29
                        DateTime gregorianDate = hebrewCalendar.ToDateTime(hebrewYear, hebrewMonth, 29, 0, 0, 0, 0);
                        throw new ArgumentException("בחודש שנבחר אין יום ל'.");
                    }
                    catch (ArgumentOutOfRangeException)
                    {
                    }
                }
                throw new ArgumentException("התאריך העברי שסופק אינו תקין.");
            }
        }
        public static DateTime convertStrToGregDate(string str)
        {
            string[] parts = str.Split(new[] { ' ', ' ' }, StringSplitOptions.RemoveEmptyEntries);
            int[] hebDate = new int[3];
            if (parts.Length == 3)
            {
                hebDate[0] = Gimatria.ConvertToGimatria(parts[0]); // day
                hebDate[2] = Gimatria.ConvertToGimatria(parts[2]); // year
                hebDate[1] = Gimatria.HebCodeshNameToNumber(parts[1], hebDate[2]); // month
            }
            else if (parts.Length == 4)
            {
                hebDate[0] = Gimatria.ConvertToGimatria(parts[0]); // day
                hebDate[2] = Gimatria.ConvertToGimatria(parts[3]); // year
                hebDate[1] = Gimatria.HebCodeshNameToNumber(parts[1] + " " + parts[2], hebDate[2]); // month
            }

            DateTime GregDate = ConvertIntToGregorianDate(hebDate[2], hebDate[1], hebDate[0]);
            return GregDate;
        }
    }
}
</file>

<file path="LICENSE.txt">
MIT License

Copyright (c) [year] [fullname]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="Parse.cs">
using System;
using System.Collections.Generic;
using System.Text;

namespace DateConv
{
    internal class Parse
    {
        /// <summary>
        /// Takes a date from the calendar and returns it in DateTime format.
        /// </summary>
        /// <param name="isHebrew">Indicates whether the input date is Hebrew or Gregorian.</param>
        /// <param name="day">The day of the month.</param>
        /// <param name="month">The month (name or number).</param>
        /// <param name="year">The year.</param>
        /// <returns>A DateTime object representing the date.</returns>
        public static DateTime GetDateFromCalendar(bool isHebrew, string day, string month, string year)
        {
            if (isHebrew)
            {
                // Convert Hebrew date to Gregorian date
                int hebDay = Gimatria.ConvertToGimatria(day);
                int hebYear = Gimatria.ConvertToGimatria(year);
                int hebMonth = Gimatria.HebCodeshNameToNumber(month, hebYear);
                return HebDate.ConvertIntToGregorianDate(hebYear, hebMonth, hebDay);
            }
            else
            {
                // Convert Gregorian date components to DateTime
                int gregDay = int.Parse(day);
                int gregMonth = int.Parse(month);
                int gregYear = int.Parse(year);
                return new DateTime(gregYear, gregMonth, gregDay);
            }
        }
    }
}
</file>

<file path="Program.cs">
using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace DateConv
{
    internal static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
</file>

<file path="Properties/AssemblyInfo.cs">
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("DateConv")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("DateConv")]
[assembly: AssemblyCopyright("Copyright ©  2025")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("d1fce3ed-63e1-4151-84a7-9a0f2088720a")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
</file>

<file path="Properties/Resources.Designer.cs">
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DateConv.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DateConv.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}
</file>

<file path="Properties/Resources.resx">
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>
</file>

<file path="Properties/Settings.Designer.cs">
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DateConv.Properties
{


    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}
</file>

<file path="Properties/Settings.settings">
<?xml version='1.0' encoding='utf-8'?>
<SettingsFile xmlns="http://schemas.microsoft.com/VisualStudio/2004/01/settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>
</file>

<file path="SyncListBox.cs">
using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

namespace DateConv
{

    public class SyncListBox : ListBox
    {
        public SyncListBox()
        {
            // אל תטרגו חריגות, ואל תנסו לגשת למשאבים חיצוניים בזמן עיצוב!
        }
        // הודעות גלילה
        private const int WM_HSCROLL = 0x0114; // גלילה אופקית :contentReference[oaicite:15]{index=15}
        private const int WM_VSCROLL = 0x0115; // גלילה אנכית :contentReference[oaicite:16]{index=16}
        private const int WM_MOUSEWHEEL = 0x020A; // גלילה אנכית בגלגל :contentReference[oaicite:17]{index=17}
        private const int WM_MOUSEHWHEEL = 0x020E; // גלילה אופקית בגלגל :contentReference[oaicite:18]{index=18}
        private const int WM_KEYDOWN = 0x0100; // לחיצה על מקש :contentReference[oaicite:19]{index=19}
        private const int WM_KEYUP = 0x0101; // שחרור מקש

        // קודי מקשים
        private const int VK_UP = 0x26;
        private const int VK_DOWN = 0x28;
        private const int VK_PRIOR = 0x21;
        private const int VK_NEXT = 0x22;
        private const int VK_HOME = 0x24;
        private const int VK_END = 0x23;

        // אירוע שמתרחש בכל גלילה
        public event ScrollEventHandler Scrolled;

        // דריסת WndProc כדי לתפוס הודעות גלילה :contentReference[oaicite:3]{index=3}
        protected override void WndProc(ref Message m)
        {
            base.WndProc(ref m);  // נותן למערכת לטפל קודם בהודעה

            bool isScrollMsg =
                m.Msg == WM_HSCROLL ||
                m.Msg == WM_VSCROLL ||
                m.Msg == WM_MOUSEWHEEL ||
                m.Msg == WM_MOUSEHWHEEL;

            bool isKeyScroll = false;
            if (m.Msg == WM_KEYDOWN)
            {
                // בדיקה של כל מקשי הגלילה במקלדת
                int vk = m.WParam.ToInt32();
                isKeyScroll =
                    vk == VK_DOWN || // חץ למטה
                    vk == VK_UP || // חץ למעלה
                    vk == VK_PRIOR || // Page Up
                    vk == VK_NEXT || // Page Down
                    vk == VK_HOME || // Home
                    vk == VK_END;      // End
            }

            if (isScrollMsg || isKeyScroll)
            {
                // הפעלת האירוע עם המיקום החדש (TopIndex) של הפריט הראשון הנראה
                Scrolled?.Invoke(this, new ScrollEventArgs(
                    ScrollEventType.EndScroll, this.TopIndex));
            }
        }
    }
}
</file>

<file path="DateConv.csproj">
<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{D1FCE3ED-63E1-4151-84A7-9A0F2088720A}</ProjectGuid>
    <OutputType>WinExe</OutputType>
    <RootNamespace>DateConv</RootNamespace>
    <AssemblyName>DateConv</AssemblyName>
    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <Deterministic>true</Deterministic>
    <PublishUrl>publish\</PublishUrl>
    <Install>true</Install>
    <InstallFrom>Disk</InstallFrom>
    <UpdateEnabled>false</UpdateEnabled>
    <UpdateMode>Foreground</UpdateMode>
    <UpdateInterval>7</UpdateInterval>
    <UpdateIntervalUnits>Days</UpdateIntervalUnits>
    <UpdatePeriodically>false</UpdatePeriodically>
    <UpdateRequired>false</UpdateRequired>
    <MapFileExtensions>true</MapFileExtensions>
    <ApplicationRevision>0</ApplicationRevision>
    <ApplicationVersion>1.0.0.%2a</ApplicationVersion>
    <IsWebBootstrapper>false</IsWebBootstrapper>
    <UseApplicationTrust>false</UseApplicationTrust>
    <BootstrapperEnabled>true</BootstrapperEnabled>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Deployment" />
    <Reference Include="System.Drawing" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="C:/t/.net/DateConv/DateConv/\CustomDate.cs">
      <Link>CustomDate.cs</Link>
    </Compile>
    <Compile Include="CustomHebDate.cs" />
    <Compile Include="Form1.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="Form1.Designer.cs">
      <DependentUpon>Form1.cs</DependentUpon>
    </Compile>
    <Compile Include="Gimatria.cs" />
    <Compile Include="HebDate.cs" />
    <Compile Include="Parse.cs" />
    <Compile Include="Program.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="SyncListBox.cs">
      <SubType>Component</SubType>
    </Compile>
    <EmbeddedResource Include="Form1.resx">
      <DependentUpon>Form1.cs</DependentUpon>
    </EmbeddedResource>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
      <SubType>Designer</SubType>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <BootstrapperPackage Include="Microsoft.Net.Framework.3.5.SP1">
      <Visible>False</Visible>
      <ProductName>.NET Framework 3.5 SP1</ProductName>
      <Install>true</Install>
    </BootstrapperPackage>
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
</Project>
</file>

<file path="Form1.cs">
using System;
using System.Windows.Forms;
//using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace DateConv
{
    public partial class Form1 : Form
    {
        private CustomDate customDate; // Add a field to hold the CustomDate instance
        private CustomHebDate customHebDate; // Add a field to hold the CustomHebDate instance        
        private bool isProgrammaticChange = false;
        public Form1()
        {
            InitializeComponent();

            // Attach the event handler to all combo boxes
            comboBoxGregYom.TextChanged += ComboBoxGreg_TextChanged;
            comboBoxGregChodesh.TextChanged += ComboBoxGreg_TextChanged;
            comboBoxGregShana.TextChanged += ComboBoxGreg_TextChanged;
            comboBoxHebYom.TextChanged += ComboBoxHeb_TextChanged;
            comboBoxHebChodesh.TextChanged += ComboBoxHeb_TextChanged;
            comboBoxHebShana.TextChanged += ComboBoxHeb_TextChanged;
            comboBoxHebElef.TextChanged += ComboBoxHeb_TextChanged;
            ListBoxHeb.Scrolled += SyncListBox1_Scrolled;             // חיבור האירוע לטבלה הראשונה
            ListBoxGreg.Scrolled += SyncListBox2_Scrolled;             // חיבור האירוע לטבלה השנייה
            this.ListBoxGreg.DoubleClick += new System.EventHandler(this.listBox_DoubleClick);
            this.ListBoxHeb.DoubleClick += new System.EventHandler(this.listBox_DoubleClick);
            ListBoxGreg.SelectedIndexChanged += SyncListBoxes;
            ListBoxHeb.SelectedIndexChanged += SyncListBoxes;
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Initialize the CustomDate instance with the current date
            customDate = new CustomDate();
            customDate.SetDate(DateTime.Now);
            customHebDate = new CustomHebDate();
            customHebDate.setHebDate(customDate.GetDate());
            HagComBoxs();
        }
        private void HagComBoxs()
        {
            isProgrammaticChange = true; // סימון שהשינוי תכנותי

            comboBoxGregYom.SelectedIndex = customDate.Day - 1;
            comboBoxGregChodesh.SelectedIndex = customDate.Month - 1;
            comboBoxGregShana.SelectedIndex = customDate.Year - 1;

            comboBoxHebYom.Text = customHebDate.Day.ToString();
            comboBoxHebChodesh.Text = customHebDate.Month.ToString();
            comboBoxHebShana.Text = customHebDate.Year.ToString();
            comboBoxHebElef.Text = customHebDate.Elef.ToString();

            isProgrammaticChange = false; // חזרה למצב רגיל
        }

        private void ComboBoxGreg_TextChanged(object sender, EventArgs e)
        {
            if (isProgrammaticChange) return; // התעלם משינויים תכנותיים


            if (sender is ComboBox comboBox)
            {
                errorProvider1.SetError(comboBox, string.Empty);
                errorProvider1.SetError(comboBoxGregYom, string.Empty);
                try
                {
                    // Handle changes based on the specific combo box
                    switch (comboBox.Name)
                    {
                        case "comboBoxGregYom":
                            customDate.Day = comboBox.SelectedIndex + 1;
                            break;
                        case "comboBoxGregChodesh":
                            customDate.Month = comboBox.SelectedIndex + 1;
                            break;
                        case "comboBoxGregShana":
                            customDate.Year = comboBox.SelectedIndex + 1;
                            break;
                    }

                    customHebDate.setHebDate(customDate.GetDate());
                }

                catch (ArgumentException ex)
                {
                    if (string.IsNullOrEmpty(comboBox.Text) || !comboBox.Items.Contains(comboBox.Text))
                    {
                        errorProvider1.SetError(comboBox, "ערך לא תקין");
                    }
                    else if (ex.Message.Contains("בחודש זה ישנם רק"))
                    {
                        // Handle the exception as needed
                        errorProvider1.SetError(comboBoxGregYom, ex.Message);
                    }
                    else
                    {
                        errorProvider1.SetError(comboBox, "ערך לא תקין");
                    }
                    return;
                }
                HagComBoxs();
            }
        }

        private void ComboBoxHeb_TextChanged(object sender, EventArgs e)
        {
            if (isProgrammaticChange) return; // התעלם משינויים תכנותיים
            {

                if (sender is ComboBox comboBox)
                {
                    errorProvider1.SetError(comboBox, string.Empty);
                    errorProvider1.SetError(comboBoxHebYom, string.Empty);
                    errorProvider1.SetError(comboBoxHebChodesh, string.Empty);

                    // Handle changes based on the specific combo box

                    switch (comboBox.Name)
                    {
                        case "comboBoxHebYom":
                            customHebDate.Day = comboBox.Text;
                            break;
                        case "comboBoxHebChodesh":
                            customHebDate.Month = comboBox.Text;
                            break;
                        case "comboBoxHebShana":
                            customHebDate.Year = comboBox.Text;
                            break;
                        case "comboBoxHebElef":
                            customHebDate.Elef = comboBox.Text;
                            break;
                    }
                    try
                    {
                        customDate.SetDate(HebDate.convertStrToGregDate(customHebDate.GetHebDate()));
                    }
                    catch (ArgumentException ex)
                    {
                        if (string.IsNullOrEmpty(comboBox.Text) || !comboBox.Items.Contains(comboBox.Text))
                        {
                            errorProvider1.SetError(comboBox, "ערך לא תקין");
                        }
                        else if (ex.Message.Contains("בחודש שנבחר אין יום ל'."))
                        {
                            // Handle the exception as needed
                            errorProvider1.SetError(comboBoxHebYom, ex.Message);
                        }
                        else if (ex.Message.Contains("השנה שנבחרה אינה מעוברת") || ex.Message.Contains("השנה שנבחרה הינה שנה מעוברת יש לבחור אדר א' או ב'"))
                        {
                            // Handle the exception as needed
                            errorProvider1.SetError(comboBoxHebChodesh, ex.Message);
                        }
                        else
                        {
                            errorProvider1.SetError(comboBox, "ערך לא תקין");
                        }
                        return;
                    }
                    HagComBoxs();
                }
            }

        }

        private void buttonShmira_Click(object sender, EventArgs e)
        {
            if (AreAllControlsValid())
            {
                // Save the date
                string gregDate = $"{customDate.Day}/{customDate.Month}/{customDate.Year}";
                string hebDate = customHebDate.GetHebDate();
                ListBoxGreg.Items.Add(gregDate);
                ListBoxHeb.Items.Add(hebDate);
            }
            else
            {

            }
        }
        private bool AreAllControlsValid()
        {
            foreach (Control control in this.Controls)
            {
                if (!string.IsNullOrEmpty(errorProvider1.GetError(control)))
                {
                    return false; // יש שגיאה באחד הפקדים
                }
            }
            return true; // אין שגיאות
        }
        private void listBox_DoubleClick(object sender, EventArgs e)
        {
            if (sender is ListBox listBox && listBox.SelectedItem != null)
            {
                // העתקת התוכן של הפריט הנבחר ללוח
                Clipboard.SetText(listBox.SelectedItem.ToString());
            }
        }

        private void dateTimePickerGreg_ValueChanged(object sender, EventArgs e)
        {
            customDate.SetDate(dateTimePickerGreg.Value);
            customHebDate.setHebDate(customDate.GetDate());
            HagComBoxs();
        }

        private void dateTimePicker2_ValueChanged(object sender, EventArgs e)
        {
            customDate.SetDate(dateTimePickerGreg.Value);
            customHebDate.setHebDate(customDate.GetDate());
            HagComBoxs();
        }

        private void buttonCopyGreg_Click(object sender, EventArgs e)
        {
            if (AreAllControlsValid())
            {
                Clipboard.SetText($"{customDate.Day}/{customDate.Month}/{customDate.Year}");
            }
        }

        private void buttonCopyHeb_Click(object sender, EventArgs e)
        {
            if (AreAllControlsValid())
            {
                Clipboard.SetText(customHebDate.GetHebDate());
            }
        }
        private void SyncListBox1_Scrolled(object sender, ScrollEventArgs e)
        {
            ListBoxGreg.TopIndex = ListBoxHeb.TopIndex;              // סנכרון TopIndex
        }

        // כשגללו את התיבה השנייה, מגדירים את המיקום של הראשונה בהתאם
        private void SyncListBox2_Scrolled(object sender, ScrollEventArgs e)
        {
            ListBoxHeb.TopIndex = ListBoxGreg.TopIndex;              // סנכרון TopIndex
        }
        private bool _isSyncing = false;

        private void SyncListBoxes(object sender, EventArgs e)
        {
            if (_isSyncing) return;                // אם כבר בעיבוד – מתעלמים
            _isSyncing = true;                     // מתחילים סנכרון

            // בוחרים בפריט המקביל
            if (sender == ListBoxGreg)
                ListBoxHeb.SelectedIndex = ListBoxGreg.SelectedIndex;
            else
                ListBoxGreg.SelectedIndex = ListBoxHeb.SelectedIndex;

            _isSyncing = false;                    // מסיימים סנכרון
        }

    }
}
</file>

<file path="Form1.Designer.cs">
using System.Reflection;
using DateConv;

namespace DateConv
{
    partial class Form1
    {
        private System.ComponentModel.IContainer components = null;
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
                components.Dispose();
            base.Dispose(disposing);
        }
        #region Windows Form Designer generated code
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(Form1));
            this.dateTimePicker1 = new System.Windows.Forms.DateTimePicker();
            this.comboBoxHebShana = new System.Windows.Forms.ComboBox();
            this.comboBoxHebElef = new System.Windows.Forms.ComboBox();
            this.comboBoxHebChodesh = new System.Windows.Forms.ComboBox();
            this.comboBoxHebYom = new System.Windows.Forms.ComboBox();
            this.comboBoxGregShana = new System.Windows.Forms.ComboBox();
            this.comboBoxGregChodesh = new System.Windows.Forms.ComboBox();
            this.comboBoxGregYom = new System.Windows.Forms.ComboBox();
            this.dateTimePickerGreg = new System.Windows.Forms.DateTimePicker();
            this.labelShanaGreg = new System.Windows.Forms.Label();
            this.labelChodeshGreg = new System.Windows.Forms.Label();
            this.labelYomGreg = new System.Windows.Forms.Label();
            this.groupBoxHeb = new System.Windows.Forms.GroupBox();
            this.buttonCopyHeb = new System.Windows.Forms.Button();
            this.dateTimePicker2 = new System.Windows.Forms.DateTimePicker();
            this.label4 = new System.Windows.Forms.Label();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.groupBoxGreg = new System.Windows.Forms.GroupBox();
            this.buttonCopyGreg = new System.Windows.Forms.Button();
            this.buttonShmira = new System.Windows.Forms.Button();
            this.errorProvider1 = new System.Windows.Forms.ErrorProvider(this.components);
            this.ListBoxGreg = new DateConv.SyncListBox();
            this.ListBoxHeb = new DateConv.SyncListBox();
            this.groupBoxHeb.SuspendLayout();
            this.groupBoxGreg.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).BeginInit();
            this.SuspendLayout();
            // 
            // dateTimePicker1
            // 
            this.dateTimePicker1.Location = new System.Drawing.Point(0, 0);
            this.dateTimePicker1.Name = "dateTimePicker1";
            this.dateTimePicker1.Size = new System.Drawing.Size(200, 26);
            this.dateTimePicker1.TabIndex = 0;
            // 
            // comboBoxHebShana
            // 
            this.comboBoxHebShana.FormattingEnabled = true;
            this.comboBoxHebShana.Items.AddRange(new object[] {
            "א",
            "ב",
            "ג",
            "ד",
            "ה",
            "ו",
            "ז",
            "ח",
            "ט",
            "י",
            "יא",
            "יב",
            "יג",
            "יד",
            "טו",
            "טז",
            "יז",
            "יח",
            "יט",
            "כ",
            "כא",
            "כב",
            "כג",
            "כד",
            "כה",
            "כו",
            "כז",
            "כח",
            "כט",
            "ל",
            "לא",
            "לב",
            "לג",
            "לד",
            "לה",
            "לו",
            "לז",
            "לח",
            "לט",
            "מ",
            "מא",
            "מב",
            "מג",
            "מד",
            "מה",
            "מו",
            "מז",
            "מח",
            "מט",
            "נ",
            "נא",
            "נב",
            "נג",
            "נד",
            "נה",
            "נו",
            "נז",
            "נח",
            "נט",
            "ס",
            "סא",
            "סב",
            "סג",
            "סד",
            "סה",
            "סו",
            "סז",
            "סח",
            "סט",
            "ע",
            "עא",
            "עב",
            "עג",
            "עד",
            "עה",
            "עו",
            "עז",
            "עח",
            "עט",
            "פ",
            "פא",
            "פב",
            "פג",
            "פד",
            "פה",
            "פו",
            "פז",
            "פח",
            "פט",
            "צ",
            "צא",
            "צב",
            "צג",
            "צד",
            "צה",
            "צו",
            "צז",
            "צח",
            "צט",
            "ק",
            "קא",
            "קב",
            "קג",
            "קד",
            "קה",
            "קו",
            "קז",
            "קח",
            "קט",
            "קי",
            "קיא",
            "קיב",
            "קיג",
            "קיד",
            "קטו",
            "קטז",
            "קיז",
            "קיח",
            "קיט",
            "קכ",
            "קכא",
            "קכב",
            "קכג",
            "קכד",
            "קכה",
            "קכו",
            "קכז",
            "קכח",
            "קכט",
            "קל",
            "קלא",
            "קלב",
            "קלג",
            "קלד",
            "קלה",
            "קלו",
            "קלז",
            "קלח",
            "קלט",
            "קמ",
            "קמא",
            "קמב",
            "קמג",
            "קמד",
            "קמה",
            "קמו",
            "קמז",
            "קמח",
            "קמט",
            "קנ",
            "קנא",
            "קנב",
            "קנג",
            "קנד",
            "קנה",
            "קנו",
            "קנז",
            "קנח",
            "קנט",
            "קס",
            "קסא",
            "קסב",
            "קסג",
            "קסד",
            "קסה",
            "קסו",
            "קסז",
            "קסח",
            "קסט",
            "קע",
            "קעא",
            "קעב",
            "קעג",
            "קעד",
            "קעה",
            "קעו",
            "קעז",
            "קעח",
            "קעט",
            "קפ",
            "קפא",
            "קפב",
            "קפג",
            "קפד",
            "קפה",
            "קפו",
            "קפז",
            "קפח",
            "קפט",
            "קצ",
            "קצא",
            "קצב",
            "קצג",
            "קצד",
            "קצה",
            "קצו",
            "קצז",
            "קצח",
            "קצט",
            "ר",
            "רא",
            "רב",
            "רג",
            "רד",
            "רה",
            "רו",
            "רז",
            "רח",
            "רט",
            "רי",
            "ריא",
            "ריב",
            "ריג",
            "ריד",
            "רטו",
            "רטז",
            "ריז",
            "ריח",
            "ריט",
            "רכ",
            "רכא",
            "רכב",
            "רכג",
            "רכד",
            "רכה",
            "רכו",
            "רכז",
            "רכח",
            "רכט",
            "רל",
            "רלא",
            "רלב",
            "רלג",
            "רלד",
            "רלה",
            "רלו",
            "רלז",
            "רלח",
            "רלט",
            "רמ",
            "רמא",
            "רמב",
            "רמג",
            "רמד",
            "רמה",
            "רמו",
            "רמז",
            "רמח",
            "רמט",
            "רנ",
            "רנא",
            "רנב",
            "רנג",
            "רנד",
            "רנה",
            "רנו",
            "רנז",
            "רנח",
            "רנט",
            "רס",
            "רסא",
            "רסב",
            "רסג",
            "רסד",
            "רסה",
            "רסו",
            "רסז",
            "רסח",
            "רסט",
            "ער",
            "ערא",
            "ערב",
            "ערג",
            "ערד",
            "ערה",
            "ערו",
            "ערז",
            "ערח",
            "ערט",
            "רפ",
            "רפא",
            "רפב",
            "רפג",
            "רפד",
            "רפה",
            "רפו",
            "רפז",
            "רפח",
            "רפט",
            "רצ",
            "רצא",
            "רצב",
            "רצג",
            "רצד",
            "רצה",
            "רצו",
            "רצז",
            "רחצ",
            "רצט",
            "ש",
            "שא",
            "שב",
            "שג",
            "דש",
            "שה",
            "שו",
            "שז",
            "שח",
            "שט",
            "שי",
            "שיא",
            "שיב",
            "שיג",
            "שיד",
            "שטו",
            "שטז",
            "שיז",
            "שיח",
            "שיט",
            "שכ",
            "שכא",
            "שכב",
            "שכג",
            "שכד",
            "שכה",
            "שכו",
            "שכז",
            "שכח",
            "שכט",
            "של",
            "שלא",
            "שלב",
            "שלג",
            "שלד",
            "שלה",
            "שלו",
            "שלז",
            "שלח",
            "שלט",
            "שמ",
            "שמא",
            "שמב",
            "שמג",
            "דשמ",
            "שמה",
            "שמו",
            "שמז",
            "שמח",
            "שמט",
            "שנ",
            "שנא",
            "שנב",
            "שנג",
            "שנד",
            "שנה",
            "שנו",
            "שנז",
            "שנח",
            "שנט",
            "שס",
            "שסא",
            "שסב",
            "שסג",
            "שסד",
            "שסה",
            "שסו",
            "שסז",
            "שסח",
            "שסט",
            "שע",
            "שעא",
            "שעב",
            "שעג",
            "שעד",
            "שעה",
            "שעו",
            "שעז",
            "שעח",
            "שעט",
            "שפ",
            "שפא",
            "שפב",
            "שפג",
            "שפד",
            "שפה",
            "שפו",
            "שפז",
            "שפח",
            "שפט",
            "שצ",
            "שצא",
            "שצב",
            "שצג",
            "שצד",
            "שצה",
            "שצו",
            "שצז",
            "שצח",
            "שצט",
            "ת",
            "תא",
            "תב",
            "תג",
            "תד",
            "תה",
            "תו",
            "תז",
            "תח",
            "תט",
            "תי",
            "תיא",
            "תיב",
            "תיג",
            "תיד",
            "תטו",
            "תטז",
            "תיז",
            "תיח",
            "תיט",
            "תכ",
            "תכא",
            "תכב",
            "תכג",
            "תכד",
            "תכה",
            "תכו",
            "תכז",
            "תכח",
            "תכט",
            "תל",
            "תלא",
            "תלב",
            "תלג",
            "תלד",
            "תלה",
            "תלו",
            "תלז",
            "תלח",
            "תלט",
            "תמ",
            "תמא",
            "תמב",
            "תמג",
            "תמד",
            "תמה",
            "תמו",
            "תמז",
            "תמח",
            "תמט",
            "תנ",
            "תנא",
            "תנב",
            "תנג",
            "תנד",
            "תנה",
            "תנו",
            "תנז",
            "תנח",
            "תנט",
            "תס",
            "תסא",
            "תסב",
            "תסג",
            "תסד",
            "תסה",
            "תסו",
            "תסז",
            "תסח",
            "תסט",
            "תע",
            "תעא",
            "תעב",
            "תעג",
            "תעד",
            "תעה",
            "תעו",
            "תעז",
            "תעח",
            "תעט",
            "תפ",
            "תפא",
            "תפב",
            "תפג",
            "תפד",
            "תפה",
            "תפו",
            "תפז",
            "תפח",
            "תפט",
            "תצ",
            "תצא",
            "תצב",
            "תצג",
            "תצד",
            "תצה",
            "תצו",
            "תצז",
            "תצח",
            "תצט",
            "תק",
            "תקא",
            "תקב",
            "תקג",
            "תקד",
            "תקה",
            "תקו",
            "תקז",
            "תקח",
            "תקט",
            "תקי",
            "תקיא",
            "תקיב",
            "תקיג",
            "תקיד",
            "תקטו",
            "תקטז",
            "תקיז",
            "תקיח",
            "תקיט",
            "תקכ",
            "תקכא",
            "תקכב",
            "תקכג",
            "תקכד",
            "תקכה",
            "תקכו",
            "תקכז",
            "תקכח",
            "תקכט",
            "תקל",
            "תקלא",
            "תקלב",
            "תקלג",
            "תקלד",
            "תקלה",
            "תקלו",
            "תקלז",
            "תקלח",
            "תקלט",
            "תקמ",
            "תקמא",
            "תקמב",
            "תקמג",
            "תקמד",
            "תקמה",
            "תקמו",
            "תקמז",
            "תקמח",
            "תקמט",
            "תקנ",
            "תקנא",
            "תקנב",
            "תקנג",
            "תקנד",
            "תקנה",
            "תקנו",
            "תקנז",
            "תקנח",
            "תקנט",
            "תקס",
            "תקסא",
            "תקסב",
            "תקסג",
            "תקסד",
            "תקסה",
            "תקסו",
            "תקסז",
            "תקסח",
            "תקסט",
            "תקע",
            "תקעא",
            "תקעב",
            "תקעג",
            "תקעד",
            "תקעה",
            "תקעו",
            "תקעז",
            "תקעח",
            "תקעט",
            "תקפ",
            "תקפא",
            "תקפב",
            "תקפג",
            "תקפד",
            "תקפה",
            "תקפו",
            "תקפז",
            "תקפח",
            "תקפט",
            "תקצ",
            "תקצא",
            "תקצב",
            "תקצג",
            "תקצד",
            "תקצה",
            "תקצו",
            "תקצז",
            "תקצח",
            "תקצט",
            "תר",
            "תרא",
            "תרב",
            "תרג",
            "תרד",
            "תרה",
            "תרו",
            "תרז",
            "תרח",
            "תרט",
            "תרי",
            "תריא",
            "תריב",
            "תריג",
            "תריד",
            "תרטו",
            "תרטז",
            "תריז",
            "תריח",
            "תריט",
            "תרכ",
            "תרכא",
            "תרכב",
            "תרכג",
            "תרכד",
            "תרכה",
            "תרכו",
            "תרכז",
            "תרכח",
            "תרכט",
            "תרל",
            "תרלא",
            "תרלב",
            "תרלג",
            "תרלד",
            "תרלה",
            "תרלו",
            "תרלז",
            "תרלח",
            "תרלט",
            "תרמ",
            "תרמא",
            "תרמב",
            "תרמג",
            "תרמד",
            "תרמה",
            "תרמו",
            "תרמז",
            "תרמח",
            "תרמט",
            "תרנ",
            "תרנא",
            "תרנב",
            "תרנג",
            "תרנד",
            "תרנה",
            "תרנו",
            "תרנז",
            "תרנח",
            "תרנט",
            "תרס",
            "תרסא",
            "תרסב",
            "תרסג",
            "תרסד",
            "תרסה",
            "תרסו",
            "תרסז",
            "תרסח",
            "תרסט",
            "תער",
            "תערא",
            "תערב",
            "תערג",
            "תערד",
            "תערה",
            "תערו",
            "תערז",
            "תערח",
            "תערט",
            "תרפ",
            "תרפא",
            "תרפב",
            "תרפג",
            "תרפד",
            "תרפה",
            "תרפו",
            "תרפז",
            "תרפח",
            "תרפט",
            "תרצ",
            "תרצא",
            "תרצב",
            "תרצג",
            "תרצד",
            "תרצה",
            "תרצו",
            "תרצז",
            "תרחצ",
            "תרצט",
            "תש",
            "תשא",
            "תשב",
            "תשג",
            "תדש",
            "תשה",
            "תשו",
            "תשז",
            "תשח",
            "תשט",
            "תשי",
            "תשיא",
            "תשיב",
            "תשיג",
            "תשיד",
            "תשטו",
            "תשטז",
            "תשיז",
            "תשיח",
            "תשיט",
            "תשכ",
            "תשכא",
            "תשכב",
            "תשכג",
            "תשכד",
            "תשכה",
            "תשכו",
            "תשכז",
            "תשכח",
            "תשכט",
            "תשל",
            "תשלא",
            "תשלב",
            "תשלג",
            "תשלד",
            "תשלה",
            "תשלו",
            "תשלז",
            "תשלח",
            "תשלט",
            "תשמ",
            "תשמא",
            "תשמב",
            "תשמג",
            "תדשמ",
            "תשמה",
            "תשמו",
            "תשמז",
            "תשמח",
            "תשמט",
            "תשנ",
            "תשנא",
            "תשנב",
            "תשנג",
            "תשנד",
            "תשנה",
            "תשנו",
            "תשנז",
            "תשנח",
            "תשנט",
            "תשס",
            "תשסא",
            "תשסב",
            "תשסג",
            "תשסד",
            "תשסה",
            "תשסו",
            "תשסז",
            "תשסח",
            "תשסט",
            "תשע",
            "תשעא",
            "תשעב",
            "תשעג",
            "תשעד",
            "תשעה",
            "תשעו",
            "תשעז",
            "תשעח",
            "תשעט",
            "תשפ",
            "תשפא",
            "תשפב",
            "תשפג",
            "תשפד",
            "תשפה",
            "תשפו",
            "תשפז",
            "תשפח",
            "תשפט",
            "תשצ",
            "תשצא",
            "תשצב",
            "תשצג",
            "תשצד",
            "תשצה",
            "תשצו",
            "תשצז",
            "תשצח",
            "תשצט",
            "תת",
            "תתא",
            "תתב",
            "תתג",
            "תתד",
            "תתה",
            "תתו",
            "תתז",
            "תתח",
            "תתט",
            "תתי",
            "תתיא",
            "תתיב",
            "תתיג",
            "תתיד",
            "תתטו",
            "תתטז",
            "תתיז",
            "תתיח",
            "תתיט",
            "תתכ",
            "תתכא",
            "תתכב",
            "תתכג",
            "תתכד",
            "תתכה",
            "תתכו",
            "תתכז",
            "תתכח",
            "תתכט",
            "תתל",
            "תתלא",
            "תתלב",
            "תתלג",
            "תתלד",
            "תתלה",
            "תתלו",
            "תתלז",
            "תתלח",
            "תתלט",
            "תתמ",
            "תתמא",
            "תתמב",
            "תתמג",
            "תתמד",
            "תתמה",
            "תתמו",
            "תתמז",
            "תתמח",
            "תתמט",
            "תתנ",
            "תתנא",
            "תתנב",
            "תתנג",
            "תתנד",
            "תתנה",
            "תתנו",
            "תתנז",
            "תתנח",
            "תתנט",
            "תתס",
            "תתסא",
            "תתסב",
            "תתסג",
            "תתסד",
            "תתסה",
            "תתסו",
            "תתסז",
            "תתסח",
            "תתסט",
            "תתע",
            "תתעא",
            "תתעב",
            "תתעג",
            "תתעד",
            "תתעה",
            "תתעו",
            "תתעז",
            "תתעח",
            "תתעט",
            "תתפ",
            "תתפא",
            "תתפב",
            "תתפג",
            "תתפד",
            "תתפה",
            "תתפו",
            "תתפז",
            "תתפח",
            "תתפט",
            "תתצ",
            "תתצא",
            "תתצב",
            "תתצג",
            "תתצד",
            "תתצה",
            "תתצו",
            "תתצז",
            "תתצח",
            "תתצט",
            "תתק",
            "תתקא",
            "תתקב",
            "תתקג",
            "תתקד",
            "תתקה",
            "תתקו",
            "תתקז",
            "תתקח",
            "תתקט",
            "תתקי",
            "תתקיא",
            "תתקיב",
            "תתקיג",
            "תתקיד",
            "תתקטו",
            "תתקטז",
            "תתקיז",
            "תתקיח",
            "תתקיט",
            "תתקכ",
            "תתקכא",
            "תתקכב",
            "תתקכג",
            "תתקכד",
            "תתקכה",
            "תתקכו",
            "תתקכז",
            "תתקכח",
            "תתקכט",
            "תתקל",
            "תתקלא",
            "תתקלב",
            "תתקלג",
            "תתקלד",
            "תתקלה",
            "תתקלו",
            "תתקלז",
            "תתקלח",
            "תתקלט",
            "תתקמ",
            "תתקמא",
            "תתקמב",
            "תתקמג",
            "תתקמד",
            "תתקמה",
            "תתקמו",
            "תתקמז",
            "תתקמח",
            "תתקמט",
            "תתקנ",
            "תתקנא",
            "תתקנב",
            "תתקנג",
            "תתקנד",
            "תתקנה",
            "תתקנו",
            "תתקנז",
            "תתקנח",
            "תתקנט",
            "תתקס",
            "תתקסא",
            "תתקסב",
            "תתקסג",
            "תתקסד",
            "תתקסה",
            "תתקסו",
            "תתקסז",
            "תתקסח",
            "תתקסט",
            "תתקע",
            "תתקעא",
            "תתקעב",
            "תתקעג",
            "תתקעד",
            "תתקעה",
            "תתקעו",
            "תתקעז",
            "תתקעח",
            "תתקעט",
            "תתקפ",
            "תתקפא",
            "תתקפב",
            "תתקפג",
            "תתקפד",
            "תתקפה",
            "תתקפו",
            "תתקפז",
            "תתקפח",
            "תתקפט",
            "תתקצ",
            "תתקצא",
            "תתקצב",
            "תתקצג",
            "תתקצד",
            "תתקצה",
            "תתקצו",
            "תתקצז",
            "תתקצח",
            "תתקצט"});
            this.comboBoxHebShana.Location = new System.Drawing.Point(46, 78);
            this.comboBoxHebShana.Name = "comboBoxHebShana";
            this.comboBoxHebShana.Size = new System.Drawing.Size(98, 28);
            this.comboBoxHebShana.TabIndex = 1;
            // 
            // comboBoxHebElef
            // 
            this.comboBoxHebElef.FormattingEnabled = true;
            this.comboBoxHebElef.Items.AddRange(new object[] {
            "א",
            "ב",
            "ג",
            "ד",
            "ה"});
            this.comboBoxHebElef.Location = new System.Drawing.Point(150, 78);
            this.comboBoxHebElef.Name = "comboBoxHebElef";
            this.comboBoxHebElef.Size = new System.Drawing.Size(51, 28);
            this.comboBoxHebElef.TabIndex = 2;
            // 
            // comboBoxHebChodesh
            // 
            this.comboBoxHebChodesh.FormattingEnabled = true;
            this.comboBoxHebChodesh.Items.AddRange(new object[] {
            "תשרי",
            "חשון",
            "כסלו",
            "טבת",
            "שבט",
            "אדר",
            "אדר א",
            "אדר ב",
            "ניסן",
            "אייר",
            "סיון",
            "תמוז",
            "אב",
            "אלול"});
            this.comboBoxHebChodesh.Location = new System.Drawing.Point(207, 78);
            this.comboBoxHebChodesh.Name = "comboBoxHebChodesh";
            this.comboBoxHebChodesh.Size = new System.Drawing.Size(101, 28);
            this.comboBoxHebChodesh.TabIndex = 3;
            // 
            // comboBoxHebYom
            // 
            this.comboBoxHebYom.FormattingEnabled = true;
            this.comboBoxHebYom.Items.AddRange(new object[] {
            "א",
            "ב",
            "ג",
            "ד",
            "ה",
            "ו",
            "ז",
            "ח",
            "ט",
            "י",
            "יא",
            "יב",
            "יג",
            "יד",
            "טו",
            "טז",
            "יז",
            "יח",
            "יט",
            "כ",
            "כא",
            "כב",
            "כג",
            "כד",
            "כה",
            "כו",
            "כז",
            "כח",
            "כט",
            "ל"});
            this.comboBoxHebYom.Location = new System.Drawing.Point(314, 78);
            this.comboBoxHebYom.Name = "comboBoxHebYom";
            this.comboBoxHebYom.Size = new System.Drawing.Size(60, 28);
            this.comboBoxHebYom.TabIndex = 4;
            // 
            // comboBoxGregShana
            // 
            this.comboBoxGregShana.FormattingEnabled = true;
            this.comboBoxGregShana.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700",
            "701",
            "702",
            "703",
            "704",
            "705",
            "706",
            "707",
            "708",
            "709",
            "710",
            "711",
            "712",
            "713",
            "714",
            "715",
            "716",
            "717",
            "718",
            "719",
            "720",
            "721",
            "722",
            "723",
            "724",
            "725",
            "726",
            "727",
            "728",
            "729",
            "730",
            "731",
            "732",
            "733",
            "734",
            "735",
            "736",
            "737",
            "738",
            "739",
            "740",
            "741",
            "742",
            "743",
            "744",
            "745",
            "746",
            "747",
            "748",
            "749",
            "750",
            "751",
            "752",
            "753",
            "754",
            "755",
            "756",
            "757",
            "758",
            "759",
            "760",
            "761",
            "762",
            "763",
            "764",
            "765",
            "766",
            "767",
            "768",
            "769",
            "770",
            "771",
            "772",
            "773",
            "774",
            "775",
            "776",
            "777",
            "778",
            "779",
            "780",
            "781",
            "782",
            "783",
            "784",
            "785",
            "786",
            "787",
            "788",
            "789",
            "790",
            "791",
            "792",
            "793",
            "794",
            "795",
            "796",
            "797",
            "798",
            "799",
            "800",
            "801",
            "802",
            "803",
            "804",
            "805",
            "806",
            "807",
            "808",
            "809",
            "810",
            "811",
            "812",
            "813",
            "814",
            "815",
            "816",
            "817",
            "818",
            "819",
            "820",
            "821",
            "822",
            "823",
            "824",
            "825",
            "826",
            "827",
            "828",
            "829",
            "830",
            "831",
            "832",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "844",
            "845",
            "846",
            "847",
            "848",
            "849",
            "850",
            "851",
            "852",
            "853",
            "854",
            "855",
            "856",
            "857",
            "858",
            "859",
            "860",
            "861",
            "862",
            "863",
            "864",
            "865",
            "866",
            "867",
            "868",
            "869",
            "870",
            "871",
            "872",
            "873",
            "874",
            "875",
            "876",
            "877",
            "878",
            "879",
            "880",
            "881",
            "882",
            "883",
            "884",
            "885",
            "886",
            "887",
            "888",
            "889",
            "890",
            "891",
            "892",
            "893",
            "894",
            "895",
            "896",
            "897",
            "898",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909",
            "910",
            "911",
            "912",
            "913",
            "914",
            "915",
            "916",
            "917",
            "918",
            "919",
            "920",
            "921",
            "922",
            "923",
            "924",
            "925",
            "926",
            "927",
            "928",
            "929",
            "930",
            "931",
            "932",
            "933",
            "934",
            "935",
            "936",
            "937",
            "938",
            "939",
            "940",
            "941",
            "942",
            "943",
            "944",
            "945",
            "946",
            "947",
            "948",
            "949",
            "950",
            "951",
            "952",
            "953",
            "954",
            "955",
            "956",
            "957",
            "958",
            "959",
            "960",
            "961",
            "962",
            "963",
            "964",
            "965",
            "966",
            "967",
            "968",
            "969",
            "970",
            "971",
            "972",
            "973",
            "974",
            "975",
            "976",
            "977",
            "978",
            "979",
            "980",
            "981",
            "982",
            "983",
            "984",
            "985",
            "986",
            "987",
            "988",
            "989",
            "990",
            "991",
            "992",
            "993",
            "994",
            "995",
            "996",
            "997",
            "998",
            "999",
            "1000",
            "1001",
            "1002",
            "1003",
            "1004",
            "1005",
            "1006",
            "1007",
            "1008",
            "1009",
            "1010",
            "1011",
            "1012",
            "1013",
            "1014",
            "1015",
            "1016",
            "1017",
            "1018",
            "1019",
            "1020",
            "1021",
            "1022",
            "1023",
            "1024",
            "1025",
            "1026",
            "1027",
            "1028",
            "1029",
            "1030",
            "1031",
            "1032",
            "1033",
            "1034",
            "1035",
            "1036",
            "1037",
            "1038",
            "1039",
            "1040",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "1050",
            "1051",
            "1052",
            "1053",
            "1054",
            "1055",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067",
            "1068",
            "1069",
            "1070",
            "1071",
            "1072",
            "1073",
            "1074",
            "1075",
            "1076",
            "1077",
            "1078",
            "1079",
            "1080",
            "1081",
            "1082",
            "1083",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "1092",
            "1093",
            "1094",
            "1095",
            "1096",
            "1097",
            "1098",
            "1099",
            "1100",
            "1101",
            "1102",
            "1103",
            "1104",
            "1105",
            "1106",
            "1107",
            "1108",
            "1109",
            "1110",
            "1111",
            "1112",
            "1113",
            "1114",
            "1115",
            "1116",
            "1117",
            "1118",
            "1119",
            "1120",
            "1121",
            "1122",
            "1123",
            "1124",
            "1125",
            "1126",
            "1127",
            "1128",
            "1129",
            "1130",
            "1131",
            "1132",
            "1133",
            "1134",
            "1135",
            "1136",
            "1137",
            "1138",
            "1139",
            "1140",
            "1141",
            "1142",
            "1143",
            "1144",
            "1145",
            "1146",
            "1147",
            "1148",
            "1149",
            "1150",
            "1151",
            "1152",
            "1153",
            "1154",
            "1155",
            "1156",
            "1157",
            "1158",
            "1159",
            "1160",
            "1161",
            "1162",
            "1163",
            "1164",
            "1165",
            "1166",
            "1167",
            "1168",
            "1169",
            "1170",
            "1171",
            "1172",
            "1173",
            "1174",
            "1175",
            "1176",
            "1177",
            "1178",
            "1179",
            "1180",
            "1181",
            "1182",
            "1183",
            "1184",
            "1185",
            "1186",
            "1187",
            "1188",
            "1189",
            "1190",
            "1191",
            "1192",
            "1193",
            "1194",
            "1195",
            "1196",
            "1197",
            "1198",
            "1199",
            "1200",
            "1201",
            "1202",
            "1203",
            "1204",
            "1205",
            "1206",
            "1207",
            "1208",
            "1209",
            "1210",
            "1211",
            "1212",
            "1213",
            "1214",
            "1215",
            "1216",
            "1217",
            "1218",
            "1219",
            "1220",
            "1221",
            "1222",
            "1223",
            "1224",
            "1225",
            "1226",
            "1227",
            "1228",
            "1229",
            "1230",
            "1231",
            "1232",
            "1233",
            "1234",
            "1235",
            "1236",
            "1237",
            "1238",
            "1239",
            "1240",
            "1241",
            "1242",
            "1243",
            "1244",
            "1245",
            "1246",
            "1247",
            "1248",
            "1249",
            "1250",
            "1251",
            "1252",
            "1253",
            "1254",
            "1255",
            "1256",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "1266",
            "1267",
            "1268",
            "1269",
            "1270",
            "1271",
            "1272",
            "1273",
            "1274",
            "1275",
            "1276",
            "1277",
            "1278",
            "1279",
            "1280",
            "1281",
            "1282",
            "1283",
            "1284",
            "1285",
            "1286",
            "1287",
            "1288",
            "1289",
            "1290",
            "1291",
            "1292",
            "1293",
            "1294",
            "1295",
            "1296",
            "1297",
            "1298",
            "1299",
            "1300",
            "1301",
            "1302",
            "1303",
            "1304",
            "1305",
            "1306",
            "1307",
            "1308",
            "1309",
            "1310",
            "1311",
            "1312",
            "1313",
            "1314",
            "1315",
            "1316",
            "1317",
            "1318",
            "1319",
            "1320",
            "1321",
            "1322",
            "1323",
            "1324",
            "1325",
            "1326",
            "1327",
            "1328",
            "1329",
            "1330",
            "1331",
            "1332",
            "1333",
            "1334",
            "1335",
            "1336",
            "1337",
            "1338",
            "1339",
            "1340",
            "1341",
            "1342",
            "1343",
            "1344",
            "1345",
            "1346",
            "1347",
            "1348",
            "1349",
            "1350",
            "1351",
            "1352",
            "1353",
            "1354",
            "1355",
            "1356",
            "1357",
            "1358",
            "1359",
            "1360",
            "1361",
            "1362",
            "1363",
            "1364",
            "1365",
            "1366",
            "1367",
            "1368",
            "1369",
            "1370",
            "1371",
            "1372",
            "1373",
            "1374",
            "1375",
            "1376",
            "1377",
            "1378",
            "1379",
            "1380",
            "1381",
            "1382",
            "1383",
            "1384",
            "1385",
            "1386",
            "1387",
            "1388",
            "1389",
            "1390",
            "1391",
            "1392",
            "1393",
            "1394",
            "1395",
            "1396",
            "1397",
            "1398",
            "1399",
            "1400",
            "1401",
            "1402",
            "1403",
            "1404",
            "1405",
            "1406",
            "1407",
            "1408",
            "1409",
            "1410",
            "1411",
            "1412",
            "1413",
            "1414",
            "1415",
            "1416",
            "1417",
            "1418",
            "1419",
            "1420",
            "1421",
            "1422",
            "1423",
            "1424",
            "1425",
            "1426",
            "1427",
            "1428",
            "1429",
            "1430",
            "1431",
            "1432",
            "1433",
            "1434",
            "1435",
            "1436",
            "1437",
            "1438",
            "1439",
            "1440",
            "1441",
            "1442",
            "1443",
            "1444",
            "1445",
            "1446",
            "1447",
            "1448",
            "1449",
            "1450",
            "1451",
            "1452",
            "1453",
            "1454",
            "1455",
            "1456",
            "1457",
            "1458",
            "1459",
            "1460",
            "1461",
            "1462",
            "1463",
            "1464",
            "1465",
            "1466",
            "1467",
            "1468",
            "1469",
            "1470",
            "1471",
            "1472",
            "1473",
            "1474",
            "1475",
            "1476",
            "1477",
            "1478",
            "1479",
            "1480",
            "1481",
            "1482",
            "1483",
            "1484",
            "1485",
            "1486",
            "1487",
            "1488",
            "1489",
            "1490",
            "1491",
            "1492",
            "1493",
            "1494",
            "1495",
            "1496",
            "1497",
            "1498",
            "1499",
            "1500",
            "1501",
            "1502",
            "1503",
            "1504",
            "1505",
            "1506",
            "1507",
            "1508",
            "1509",
            "1510",
            "1511",
            "1512",
            "1513",
            "1514",
            "1515",
            "1516",
            "1517",
            "1518",
            "1519",
            "1520",
            "1521",
            "1522",
            "1523",
            "1524",
            "1525",
            "1526",
            "1527",
            "1528",
            "1529",
            "1530",
            "1531",
            "1532",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "1540",
            "1541",
            "1542",
            "1543",
            "1544",
            "1545",
            "1546",
            "1547",
            "1548",
            "1549",
            "1550",
            "1551",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "1560",
            "1561",
            "1562",
            "1563",
            "1564",
            "1565",
            "1566",
            "1567",
            "1568",
            "1569",
            "1570",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "1579",
            "1580",
            "1581",
            "1582",
            "1583",
            "1584",
            "1585",
            "1586",
            "1587",
            "1588",
            "1589",
            "1590",
            "1591",
            "1592",
            "1593",
            "1594",
            "1595",
            "1596",
            "1597",
            "1598",
            "1599",
            "1600",
            "1601",
            "1602",
            "1603",
            "1604",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "1614",
            "1615",
            "1616",
            "1617",
            "1618",
            "1619",
            "1620",
            "1621",
            "1622",
            "1623",
            "1624",
            "1625",
            "1626",
            "1627",
            "1628",
            "1629",
            "1630",
            "1631",
            "1632",
            "1633",
            "1634",
            "1635",
            "1636",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "1642",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "1648",
            "1649",
            "1650",
            "1651",
            "1652",
            "1653",
            "1654",
            "1655",
            "1656",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1669",
            "1670",
            "1671",
            "1672",
            "1673",
            "1674",
            "1675",
            "1676",
            "1677",
            "1678",
            "1679",
            "1680",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "1689",
            "1690",
            "1691",
            "1692",
            "1693",
            "1694",
            "1695",
            "1696",
            "1697",
            "1698",
            "1699",
            "1700",
            "1701",
            "1702",
            "1703",
            "1704",
            "1705",
            "1706",
            "1707",
            "1708",
            "1709",
            "1710",
            "1711",
            "1712",
            "1713",
            "1714",
            "1715",
            "1716",
            "1717",
            "1718",
            "1719",
            "1720",
            "1721",
            "1722",
            "1723",
            "1724",
            "1725",
            "1726",
            "1727",
            "1728",
            "1729",
            "1730",
            "1731",
            "1732",
            "1733",
            "1734",
            "1735",
            "1736",
            "1737",
            "1738",
            "1739",
            "1740",
            "1741",
            "1742",
            "1743",
            "1744",
            "1745",
            "1746",
            "1747",
            "1748",
            "1749",
            "1750",
            "1751",
            "1752",
            "1753",
            "1754",
            "1755",
            "1756",
            "1757",
            "1758",
            "1759",
            "1760",
            "1761",
            "1762",
            "1763",
            "1764",
            "1765",
            "1766",
            "1767",
            "1768",
            "1769",
            "1770",
            "1771",
            "1772",
            "1773",
            "1774",
            "1775",
            "1776",
            "1777",
            "1778",
            "1779",
            "1780",
            "1781",
            "1782",
            "1783",
            "1784",
            "1785",
            "1786",
            "1787",
            "1788",
            "1789",
            "1790",
            "1791",
            "1792",
            "1793",
            "1794",
            "1795",
            "1796",
            "1797",
            "1798",
            "1799",
            "1800",
            "1801",
            "1802",
            "1803",
            "1804",
            "1805",
            "1806",
            "1807",
            "1808",
            "1809",
            "1810",
            "1811",
            "1812",
            "1813",
            "1814",
            "1815",
            "1816",
            "1817",
            "1818",
            "1819",
            "1820",
            "1821",
            "1822",
            "1823",
            "1824",
            "1825",
            "1826",
            "1827",
            "1828",
            "1829",
            "1830",
            "1831",
            "1832",
            "1833",
            "1834",
            "1835",
            "1836",
            "1837",
            "1838",
            "1839",
            "1840",
            "1841",
            "1842",
            "1843",
            "1844",
            "1845",
            "1846",
            "1847",
            "1848",
            "1849",
            "1850",
            "1851",
            "1852",
            "1853",
            "1854",
            "1855",
            "1856",
            "1857",
            "1858",
            "1859",
            "1860",
            "1861",
            "1862",
            "1863",
            "1864",
            "1865",
            "1866",
            "1867",
            "1868",
            "1869",
            "1870",
            "1871",
            "1872",
            "1873",
            "1874",
            "1875",
            "1876",
            "1877",
            "1878",
            "1879",
            "1880",
            "1881",
            "1882",
            "1883",
            "1884",
            "1885",
            "1886",
            "1887",
            "1888",
            "1889",
            "1890",
            "1891",
            "1892",
            "1893",
            "1894",
            "1895",
            "1896",
            "1897",
            "1898",
            "1899",
            "1900",
            "1901",
            "1902",
            "1903",
            "1904",
            "1905",
            "1906",
            "1907",
            "1908",
            "1909",
            "1910",
            "1911",
            "1912",
            "1913",
            "1914",
            "1915",
            "1916",
            "1917",
            "1918",
            "1919",
            "1920",
            "1921",
            "1922",
            "1923",
            "1924",
            "1925",
            "1926",
            "1927",
            "1928",
            "1929",
            "1930",
            "1931",
            "1932",
            "1933",
            "1934",
            "1935",
            "1936",
            "1937",
            "1938",
            "1939",
            "1940",
            "1941",
            "1942",
            "1943",
            "1944",
            "1945",
            "1946",
            "1947",
            "1948",
            "1949",
            "1950",
            "1951",
            "1952",
            "1953",
            "1954",
            "1955",
            "1956",
            "1957",
            "1958",
            "1959",
            "1960",
            "1961",
            "1962",
            "1963",
            "1964",
            "1965",
            "1966",
            "1967",
            "1968",
            "1969",
            "1970",
            "1971",
            "1972",
            "1973",
            "1974",
            "1975",
            "1976",
            "1977",
            "1978",
            "1979",
            "1980",
            "1981",
            "1982",
            "1983",
            "1984",
            "1985",
            "1986",
            "1987",
            "1988",
            "1989",
            "1990",
            "1991",
            "1992",
            "1993",
            "1994",
            "1995",
            "1996",
            "1997",
            "1998",
            "1999",
            "2000",
            "2001",
            "2002",
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013",
            "2014",
            "2015",
            "2016",
            "2017",
            "2018",
            "2019",
            "2020",
            "2021",
            "2022",
            "2023",
            "2024",
            "2025",
            "2026",
            "2027",
            "2028",
            "2029",
            "2030",
            "2031",
            "2032",
            "2033",
            "2034",
            "2035",
            "2036",
            "2037",
            "2038",
            "2039",
            "2040",
            "2041",
            "2042",
            "2043",
            "2044",
            "2045",
            "2046",
            "2047",
            "2048",
            "2049",
            "2050",
            "2051",
            "2052",
            "2053",
            "2054",
            "2055",
            "2056",
            "2057",
            "2058",
            "2059",
            "2060",
            "2061",
            "2062",
            "2063",
            "2064",
            "2065",
            "2066",
            "2067",
            "2068",
            "2069",
            "2070",
            "2071",
            "2072",
            "2073",
            "2074",
            "2075",
            "2076",
            "2077",
            "2078",
            "2079",
            "2080",
            "2081",
            "2082",
            "2083",
            "2084",
            "2085",
            "2086",
            "2087",
            "2088",
            "2089",
            "2090",
            "2091",
            "2092",
            "2093",
            "2094",
            "2095",
            "2096",
            "2097",
            "2098",
            "2099",
            "2100",
            "2101",
            "2102",
            "2103",
            "2104",
            "2105",
            "2106",
            "2107",
            "2108",
            "2109",
            "2110",
            "2111",
            "2112",
            "2113",
            "2114",
            "2115",
            "2116",
            "2117",
            "2118",
            "2119",
            "2120",
            "2121",
            "2122",
            "2123",
            "2124",
            "2125",
            "2126",
            "2127",
            "2128",
            "2129",
            "2130",
            "2131",
            "2132",
            "2133",
            "2134",
            "2135",
            "2136",
            "2137",
            "2138",
            "2139",
            "2140",
            "2141",
            "2142",
            "2143",
            "2144",
            "2145",
            "2146",
            "2147",
            "2148",
            "2149",
            "2150",
            "2151",
            "2152",
            "2153",
            "2154",
            "2155",
            "2156",
            "2157",
            "2158",
            "2159",
            "2160",
            "2161",
            "2162",
            "2163",
            "2164",
            "2165",
            "2166",
            "2167",
            "2168",
            "2169",
            "2170",
            "2171",
            "2172",
            "2173",
            "2174",
            "2175",
            "2176",
            "2177",
            "2178",
            "2179",
            "2180",
            "2181",
            "2182",
            "2183",
            "2184",
            "2185",
            "2186",
            "2187",
            "2188",
            "2189",
            "2190",
            "2191",
            "2192",
            "2193",
            "2194",
            "2195",
            "2196",
            "2197",
            "2198",
            "2199",
            "2200",
            "2201"});
            this.comboBoxGregShana.Location = new System.Drawing.Point(264, 78);
            this.comboBoxGregShana.Name = "comboBoxGregShana";
            this.comboBoxGregShana.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.comboBoxGregShana.Size = new System.Drawing.Size(110, 28);
            this.comboBoxGregShana.TabIndex = 5;
            // 
            // comboBoxGregChodesh
            // 
            this.comboBoxGregChodesh.FormattingEnabled = true;
            this.comboBoxGregChodesh.Items.AddRange(new object[] {
            "ינואר - 1",
            "פברואר - 2",
            "מרץ - 3",
            "אפריל - 4",
            "מאי - 5",
            "יוני - 6",
            "יולי - 7",
            "אוגוסט - 8",
            "ספטמבר - 9",
            "אוקטובר - 10",
            "נובמבר - 11",
            "דצמבר - 12"});
            this.comboBoxGregChodesh.Location = new System.Drawing.Point(106, 78);
            this.comboBoxGregChodesh.Name = "comboBoxGregChodesh";
            this.comboBoxGregChodesh.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.comboBoxGregChodesh.Size = new System.Drawing.Size(152, 28);
            this.comboBoxGregChodesh.TabIndex = 6;
            // 
            // comboBoxGregYom
            // 
            this.comboBoxGregYom.FormattingEnabled = true;
            this.comboBoxGregYom.Items.AddRange(new object[] {
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31"});
            this.comboBoxGregYom.Location = new System.Drawing.Point(46, 78);
            this.comboBoxGregYom.Name = "comboBoxGregYom";
            this.comboBoxGregYom.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.comboBoxGregYom.Size = new System.Drawing.Size(54, 28);
            this.comboBoxGregYom.TabIndex = 7;
            // 
            // dateTimePickerGreg
            // 
            this.dateTimePickerGreg.Location = new System.Drawing.Point(8, 80);
            this.dateTimePickerGreg.Name = "dateTimePickerGreg";
            this.dateTimePickerGreg.RightToLeft = System.Windows.Forms.RightToLeft.No;
            this.dateTimePickerGreg.Size = new System.Drawing.Size(25, 26);
            this.dateTimePickerGreg.TabIndex = 8;
            this.dateTimePickerGreg.ValueChanged += new System.EventHandler(this.dateTimePickerGreg_ValueChanged);
            // 
            // labelShanaGreg
            // 
            this.labelShanaGreg.AutoSize = true;
            this.labelShanaGreg.Location = new System.Drawing.Point(306, 49);
            this.labelShanaGreg.Name = "labelShanaGreg";
            this.labelShanaGreg.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.labelShanaGreg.Size = new System.Drawing.Size(39, 20);
            this.labelShanaGreg.TabIndex = 9;
            this.labelShanaGreg.Text = "שנה:";
            // 
            // labelChodeshGreg
            // 
            this.labelChodeshGreg.AutoSize = true;
            this.labelChodeshGreg.Location = new System.Drawing.Point(158, 49);
            this.labelChodeshGreg.Name = "labelChodeshGreg";
            this.labelChodeshGreg.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.labelChodeshGreg.Size = new System.Drawing.Size(48, 20);
            this.labelChodeshGreg.TabIndex = 10;
            this.labelChodeshGreg.Text = "חודש:";
            // 
            // labelYomGreg
            // 
            this.labelYomGreg.AutoSize = true;
            this.labelYomGreg.Location = new System.Drawing.Point(68, 49);
            this.labelYomGreg.Name = "labelYomGreg";
            this.labelYomGreg.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.labelYomGreg.Size = new System.Drawing.Size(32, 20);
            this.labelYomGreg.TabIndex = 11;
            this.labelYomGreg.Text = "יום:";
            // 
            // groupBoxHeb
            // 
            this.groupBoxHeb.Controls.Add(this.buttonCopyHeb);
            this.groupBoxHeb.Controls.Add(this.dateTimePicker2);
            this.groupBoxHeb.Controls.Add(this.label4);
            this.groupBoxHeb.Controls.Add(this.label1);
            this.groupBoxHeb.Controls.Add(this.label2);
            this.groupBoxHeb.Controls.Add(this.label3);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebShana);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebElef);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebChodesh);
            this.groupBoxHeb.Controls.Add(this.comboBoxHebYom);
            this.groupBoxHeb.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(177)));
            this.groupBoxHeb.Location = new System.Drawing.Point(33, 28);
            this.groupBoxHeb.Name = "groupBoxHeb";
            this.groupBoxHeb.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.groupBoxHeb.Size = new System.Drawing.Size(380, 115);
            this.groupBoxHeb.TabIndex = 12;
            this.groupBoxHeb.TabStop = false;
            this.groupBoxHeb.Text = "תאריך עברי";
            // 
            // buttonCopyHeb
            // 
            this.buttonCopyHeb.Location = new System.Drawing.Point(242, 0);
            this.buttonCopyHeb.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
            this.buttonCopyHeb.Name = "buttonCopyHeb";
            this.buttonCopyHeb.Size = new System.Drawing.Size(30, 30);
            this.buttonCopyHeb.TabIndex = 17;
            this.buttonCopyHeb.Text = "C";
            this.buttonCopyHeb.UseVisualStyleBackColor = true;
            this.buttonCopyHeb.Click += new System.EventHandler(this.buttonCopyHeb_Click);
            // 
            // dateTimePicker2
            // 
            this.dateTimePicker2.Location = new System.Drawing.Point(8, 80);
            this.dateTimePicker2.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
            this.dateTimePicker2.Name = "dateTimePicker2";
            this.dateTimePicker2.Size = new System.Drawing.Size(25, 26);
            this.dateTimePicker2.TabIndex = 16;
            this.dateTimePicker2.ValueChanged += new System.EventHandler(this.dateTimePicker2_ValueChanged);
            // 
            // label4
            // 
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(155, 49);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(41, 20);
            this.label4.TabIndex = 15;
            this.label4.Text = "אלף:";
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(78, 49);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(39, 20);
            this.label1.TabIndex = 12;
            this.label1.Text = "שנה:";
            // 
            // label2
            // 
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(248, 49);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(48, 20);
            this.label2.TabIndex = 13;
            this.label2.Text = "חודש:";
            // 
            // label3
            // 
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(331, 49);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(32, 20);
            this.label3.TabIndex = 14;
            this.label3.Text = "יום:";
            // 
            // groupBoxGreg
            // 
            this.groupBoxGreg.Controls.Add(this.buttonCopyGreg);
            this.groupBoxGreg.Controls.Add(this.dateTimePickerGreg);
            this.groupBoxGreg.Controls.Add(this.labelShanaGreg);
            this.groupBoxGreg.Controls.Add(this.comboBoxGregShana);
            this.groupBoxGreg.Controls.Add(this.labelChodeshGreg);
            this.groupBoxGreg.Controls.Add(this.comboBoxGregChodesh);
            this.groupBoxGreg.Controls.Add(this.labelYomGreg);
            this.groupBoxGreg.Controls.Add(this.comboBoxGregYom);
            this.groupBoxGreg.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(177)));
            this.groupBoxGreg.Location = new System.Drawing.Point(33, 164);
            this.groupBoxGreg.Name = "groupBoxGreg";
            this.groupBoxGreg.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.groupBoxGreg.Size = new System.Drawing.Size(380, 115);
            this.groupBoxGreg.TabIndex = 13;
            this.groupBoxGreg.TabStop = false;
            this.groupBoxGreg.Text = "תאריך לועזי";
            // 
            // buttonCopyGreg
            // 
            this.buttonCopyGreg.Location = new System.Drawing.Point(242, 0);
            this.buttonCopyGreg.Margin = new System.Windows.Forms.Padding(4, 5, 4, 5);
            this.buttonCopyGreg.Name = "buttonCopyGreg";
            this.buttonCopyGreg.Size = new System.Drawing.Size(30, 30);
            this.buttonCopyGreg.TabIndex = 12;
            this.buttonCopyGreg.Text = "C";
            this.buttonCopyGreg.UseVisualStyleBackColor = true;
            this.buttonCopyGreg.Click += new System.EventHandler(this.buttonCopyGreg_Click);
            // 
            // buttonShmira
            // 
            this.buttonShmira.AutoSize = true;
            this.buttonShmira.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(177)));
            this.buttonShmira.Location = new System.Drawing.Point(152, 302);
            this.buttonShmira.Name = "buttonShmira";
            this.buttonShmira.Size = new System.Drawing.Size(142, 46);
            this.buttonShmira.TabIndex = 17;
            this.buttonShmira.Text = "שמור המרה";
            this.buttonShmira.UseVisualStyleBackColor = true;
            this.buttonShmira.Click += new System.EventHandler(this.buttonShmira_Click);
            // 
            // errorProvider1
            // 
            this.errorProvider1.ContainerControl = this;
            this.errorProvider1.RightToLeft = true;
            // 
            // ListBoxGreg
            // 
            this.ListBoxGreg.FormattingEnabled = true;
            this.ListBoxGreg.ItemHeight = 20;
            this.ListBoxGreg.Location = new System.Drawing.Point(225, 354);
            this.ListBoxGreg.Name = "ListBoxGreg";
            this.ListBoxGreg.Size = new System.Drawing.Size(188, 124);
            this.ListBoxGreg.TabIndex = 19;
            // 
            // ListBoxHeb
            // 
            this.ListBoxHeb.FormattingEnabled = true;
            this.ListBoxHeb.ItemHeight = 20;
            this.ListBoxHeb.Location = new System.Drawing.Point(33, 354);
            this.ListBoxHeb.Name = "ListBoxHeb";
            this.ListBoxHeb.Size = new System.Drawing.Size(188, 124);
            this.ListBoxHeb.TabIndex = 18;
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(9F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(438, 501);
            this.Controls.Add(this.ListBoxGreg);
            this.Controls.Add(this.ListBoxHeb);
            this.Controls.Add(this.buttonShmira);
            this.Controls.Add(this.groupBoxHeb);
            this.Controls.Add(this.groupBoxGreg);
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.Name = "Form1";
            this.RightToLeft = System.Windows.Forms.RightToLeft.Yes;
            this.RightToLeftLayout = true;
            this.Text = "המרת תאריכים";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.groupBoxHeb.ResumeLayout(false);
            this.groupBoxHeb.PerformLayout();
            this.groupBoxGreg.ResumeLayout(false);
            this.groupBoxGreg.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).EndInit();
            this.ResumeLayout(false);
            this.PerformLayout();

        }
        #endregion

        private System.Windows.Forms.DateTimePicker dateTimePicker1;
        private System.Windows.Forms.ComboBox comboBoxHebShana;
        private System.Windows.Forms.ComboBox comboBoxHebElef;
        private System.Windows.Forms.ComboBox comboBoxHebChodesh;
        private System.Windows.Forms.ComboBox comboBoxHebYom;
        private System.Windows.Forms.ComboBox comboBoxGregShana;
        private System.Windows.Forms.ComboBox comboBoxGregChodesh;
        private System.Windows.Forms.ComboBox comboBoxGregYom;
        private System.Windows.Forms.DateTimePicker dateTimePickerGreg;
        private System.Windows.Forms.Label labelShanaGreg;
        private System.Windows.Forms.Label labelChodeshGreg;
        private System.Windows.Forms.Label labelYomGreg;
        private System.Windows.Forms.GroupBox groupBoxHeb;
        private System.Windows.Forms.GroupBox groupBoxGreg;
        private System.Windows.Forms.Button buttonShmira;
        private System.Windows.Forms.ErrorProvider errorProvider1;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.DateTimePicker dateTimePicker2;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.Button buttonCopyHeb;
        private System.Windows.Forms.Button buttonCopyGreg;
        private SyncListBox ListBoxGreg;
        private SyncListBox ListBoxHeb;
    }
}
</file>

<file path="README.md">
# DateConv
המרת תאריכים מתאריך עברי לתאריך לועזי
### התוכנה נועדה לעודד שימוש בתאריך עברי, ולא בלועזי
</file>

</files>
